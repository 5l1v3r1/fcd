// file autogenerated by interpiler
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#include <llvm/IR/Constants.h>
#include "x86.h"

x86::x86(llvm::LLVMContext& context, llvm::Module& module)
	: context(context), module(module), function(nullptr), lastBlock(nullptr), builder(context)
{
	make_types();
	make_globals();
}

void x86::make_types()
{
	types.resize(39);
	using namespace llvm;
	StructType* struct_0 = StructType::create(context, "struct.cs_x86");
	types[0] = struct_0;
	struct_types["struct.cs_x86"] = struct_0;
	types[1] = IntegerType::get(context, 8);
	types[2] = ArrayType::get(types[1], 4);
	types[3] = IntegerType::get(context, 32);
	StructType* struct_4 = StructType::create(context, "struct.cs_x86_op");
	types[4] = struct_4;
	struct_types["struct.cs_x86_op"] = struct_4;
	StructType* struct_5 = StructType::create(context, "union.anon");
	types[5] = struct_5;
	struct_types["union.anon"] = struct_5;
	StructType* struct_6 = StructType::create(context, "struct.x86_op_mem");
	types[6] = struct_6;
	struct_types["struct.x86_op_mem"] = struct_6;
	types[7] = IntegerType::get(context, 64);
	ArrayRef<Type*> struct_type_params_6 = { types[3], types[3], types[3], types[3], types[7], };
	struct_6->setBody(struct_type_params_6, false);
	ArrayRef<Type*> struct_type_params_5 = { types[6], };
	struct_5->setBody(struct_type_params_5, false);
	ArrayRef<Type*> struct_type_params_4 = { types[3], types[5], types[1], types[3], types[1], };
	struct_4->setBody(struct_type_params_4, false);
	types[8] = ArrayType::get(types[4], 8);
	ArrayRef<Type*> struct_type_params_0 = { types[2], types[2], types[1], types[1], types[1], types[1], types[3], types[3], types[1], types[3], types[3], types[3], types[1], types[3], types[1], types[8], };
	struct_0->setBody(struct_type_params_0, false);
	types[9] = PointerType::get(types[0], 0);
	StructType* struct_10 = StructType::create(context, "struct.x86_regs");
	types[10] = struct_10;
	struct_types["struct.x86_regs"] = struct_10;
	StructType* struct_11 = StructType::create(context, "union.x86_qword_reg");
	types[11] = struct_11;
	struct_types["union.x86_qword_reg"] = struct_11;
	ArrayRef<Type*> struct_type_params_11 = { types[7], };
	struct_11->setBody(struct_type_params_11, false);
	StructType* struct_12 = StructType::create(context, "struct.x86_flags_reg");
	types[12] = struct_12;
	struct_types["struct.x86_flags_reg"] = struct_12;
	ArrayRef<Type*> struct_type_params_12 = { types[1], types[1], types[1], types[1], types[1], types[1], };
	struct_12->setBody(struct_type_params_12, false);
	StructType* struct_13 = StructType::create(context, "union.x86_mm_reg");
	types[13] = struct_13;
	struct_types["union.x86_mm_reg"] = struct_13;
	types[14] = Type::getDoubleTy(context);
	types[15] = ArrayType::get(types[14], 8);
	ArrayRef<Type*> struct_type_params_13 = { types[15], };
	struct_13->setBody(struct_type_params_13, false);
	ArrayRef<Type*> struct_type_params_10 = { types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[12], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[11], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], types[13], };
	struct_10->setBody(struct_type_params_10, false);
	types[16] = PointerType::get(types[10], 0);
	ArrayRef<Type*> func_type_params_17 = { types[9], types[16], };
	types[17] = Type::getVoidTy(context);
	types[18] = FunctionType::get(types[17], func_type_params_17, false);
	ArrayRef<Type*> func_type_params_19 = { types[16], types[3], };
	types[19] = FunctionType::get(types[7], func_type_params_19, false);
	ArrayRef<Type*> func_type_params_20 = { types[7], types[7], };
	types[20] = FunctionType::get(types[7], func_type_params_20, false);
	types[21] = PointerType::get(types[1], 0);
	ArrayRef<Type*> func_type_params_22 = { types[21], };
	types[22] = FunctionType::get(types[17], func_type_params_22, false);
	types[23] = ArrayType::get(types[1], 54);
	types[24] = PointerType::get(types[7], 0);
	types[25] = ArrayType::get(types[1], 49);
	ArrayRef<Type*> func_type_params_26 = { types[7], types[7], };
	StructType* struct_26 = StructType::create(context);
	types[26] = struct_26;
	types[27] = IntegerType::get(context, 1);
	ArrayRef<Type*> struct_type_params_26 = { types[7], types[27], };
	struct_26->setBody(struct_type_params_26, false);
	types[28] = FunctionType::get(types[26], func_type_params_26, false);
	types[29] = ArrayType::get(types[1], 25);
	ArrayRef<Type*> func_type_params_30 = { types[7], };
	types[30] = FunctionType::get(types[7], func_type_params_30, false);
	ArrayRef<Type*> func_type_params_31 = { types[16], types[3], types[7], };
	types[31] = FunctionType::get(types[17], func_type_params_31, false);
	ArrayRef<Type*> func_type_params_32 = { types[7], types[7], types[7], };
	types[32] = FunctionType::get(types[17], func_type_params_32, false);
	types[33] = ArrayType::get(types[1], 56);
	ArrayRef<Type*> func_type_params_34 = { types[7], types[16], };
	types[34] = FunctionType::get(types[17], func_type_params_34, false);
	StructType* struct_35 = StructType::create(context, "struct.x86_config");
	types[35] = struct_35;
	struct_types["struct.x86_config"] = struct_35;
	ArrayRef<Type*> struct_type_params_35 = { types[7], types[3], types[3], types[3], };
	struct_35->setBody(struct_type_params_35, false);
	types[36] = PointerType::get(types[35], 0);
	ArrayRef<Type*> func_type_params_37 = { types[36], types[16], types[7], };
	types[37] = FunctionType::get(types[17], func_type_params_37, false);
	ArrayRef<Type*> func_type_params_38 = { types[16], };
	types[38] = FunctionType::get(types[17], func_type_params_38, false);
}

void x86::make_globals()
{
	globals.resize(15);
	using namespace llvm;
	globals[0] = Function::Create(cast<FunctionType>(types[18]), GlobalValue::ExternalLinkage, "x86_unimplemented", &module);
	globals[1] = Function::Create(cast<FunctionType>(types[19]), GlobalValue::ExternalLinkage, "x86_read_reg", &module);
	globals[2] = Function::Create(cast<FunctionType>(types[20]), GlobalValue::ExternalLinkage, "x86_read_mem", &module);
	globals[3] = Function::Create(cast<FunctionType>(types[22]), GlobalValue::ExternalLinkage, "x86_assertion_failure", &module);
	Constant* var4_string = ConstantDataArray::getString(context, "trying to read destination from FP or invalid operand", true);
	GlobalVariable* cv4 = new GlobalVariable(module, types[23], true, GlobalValue::PrivateLinkage, var4_string, ".str", nullptr, GlobalValue::NotThreadLocal, 0, false);
	cv4->setLinkage(GlobalValue::PrivateLinkage);
	cv4->setUnnamedAddr(true);
	globals[4] = cv4;
	
	Constant* var5_string = ConstantDataArray::getString(context, "trying to read source from FP or invalid operand", true);
	GlobalVariable* cv5 = new GlobalVariable(module, types[25], true, GlobalValue::PrivateLinkage, var5_string, ".str1", nullptr, GlobalValue::NotThreadLocal, 0, false);
	cv5->setLinkage(GlobalValue::PrivateLinkage);
	cv5->setUnnamedAddr(true);
	globals[5] = cv5;
	
	globals[6] = Function::Create(cast<FunctionType>(types[28]), GlobalValue::ExternalLinkage, "llvm.uadd.with.overflow.i64", &module);
	Constant* var7_string = ConstantDataArray::getString(context, "invalid destination size", true);
	GlobalVariable* cv7 = new GlobalVariable(module, types[29], true, GlobalValue::PrivateLinkage, var7_string, ".str3", nullptr, GlobalValue::NotThreadLocal, 0, false);
	cv7->setLinkage(GlobalValue::PrivateLinkage);
	cv7->setUnnamedAddr(true);
	globals[7] = cv7;
	
	globals[8] = Function::Create(cast<FunctionType>(types[30]), GlobalValue::ExternalLinkage, "llvm.ctpop.i64", &module);
	globals[9] = Function::Create(cast<FunctionType>(types[31]), GlobalValue::ExternalLinkage, "x86_write_reg", &module);
	globals[10] = Function::Create(cast<FunctionType>(types[32]), GlobalValue::ExternalLinkage, "x86_write_mem", &module);
	Constant* var11_string = ConstantDataArray::getString(context, "mov trying to write to immediate, FP or invalid operand", true);
	GlobalVariable* cv11 = new GlobalVariable(module, types[33], true, GlobalValue::PrivateLinkage, var11_string, ".str2", nullptr, GlobalValue::NotThreadLocal, 0, false);
	cv11->setLinkage(GlobalValue::PrivateLinkage);
	cv11->setUnnamedAddr(true);
	globals[11] = cv11;
	
	globals[12] = Function::Create(cast<FunctionType>(types[34]), GlobalValue::ExternalLinkage, "x86_call_intrin", &module);
	globals[13] = Function::Create(cast<FunctionType>(types[37]), GlobalValue::ExternalLinkage, "x86_jump", &module);
	globals[14] = Function::Create(cast<FunctionType>(types[38]), GlobalValue::ExternalLinkage, "x86_ret_intrin", &module);
}

void x86::start_function(llvm::FunctionType& type, const std::string& name)
{
	assert(function == nullptr && "unterminated function");
	assert(type.getReturnType()->isVoidTy() && "created functions must return void");
	function = llvm::Function::Create(&type, llvm::GlobalValue::ExternalLinkage, name, &module);
	start_block();
}

llvm::Function* x86::end_function()
{
	builder.CreateRetVoid();
	auto fn = function;
	function = nullptr;
	return fn;
}

llvm::BasicBlock* x86::start_block(const std::string& name)
{
	lastBlock = llvm::BasicBlock::Create(context, name, function);
	if (builder.GetInsertBlock() != nullptr)
	{
		builder.CreateBr(lastBlock);
	}
	builder.SetInsertPoint(lastBlock);
	return lastBlock;
}

llvm::Type* x86::type_by_name(const std::string& name)
{
	auto iter = struct_types.find(name);
	assert(iter != struct_types.end());
	return iter->second;
}

void x86::x86_aaa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aad(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aam(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aas(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_adc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	BasicBlock* block32 = BasicBlock::Create(context, "", function);
	BasicBlock* block33 = BasicBlock::Create(context, "", function);
	BasicBlock* block34 = BasicBlock::Create(context, "", function);
	BasicBlock* block35 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep84_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep84_var = builder.CreateInBoundsGEP(arg2, gep84_array);
	llvm::LoadInst* load85_var = builder.CreateLoad(gep84_var, false);
	load85_var->setAlignment(1);
	Value* cast86_var = builder.CreateCast(Instruction::ZExt, load85_var, types[7]);
	Constant* gep87_val87_int = ConstantInt::get(types[3], 24u);
	ArrayRef<Value*> gep87_array { gep3_val3_int, gep87_val87_int, gep3_val5_int, };
	Value* gep87_var = builder.CreateInBoundsGEP(arg0, gep87_array);
	llvm::LoadInst* load89_var = builder.CreateLoad(gep87_var, false);
	load89_var->setAlignment(1);
	CallInst* call90_var = builder.CreateCall2(globals[6], phi45_var, phi83_var);
	call90_var->setTailCall();
	call90_var->setDoesNotAccessMemory();
	call90_var->setOnlyReadsMemory();
	call90_var->setDoesNotThrow();
	ArrayRef<unsigned> extr92_array { 0, };
	Value* extr92_var = builder.CreateExtractValue(call90_var, extr92_array);
	Value* cast93_var = builder.CreateCast(Instruction::ZExt, load89_var, types[7]);
	CallInst* call94_var = builder.CreateCall2(globals[6], extr92_var, cast93_var);
	call94_var->setTailCall();
	call94_var->setDoesNotAccessMemory();
	call94_var->setOnlyReadsMemory();
	call94_var->setDoesNotThrow();
	ArrayRef<unsigned> extr95_array { 0, };
	Value* extr95_var = builder.CreateExtractValue(call94_var, extr95_array);
	SwitchInst* switch96_var = builder.CreateSwitch(cast86_var, block24, 4);
	Constant* switch96_val96_int = ConstantInt::get(types[7], 4u);
	switch96_var->addCase(cast<ConstantInt>(switch96_val96_int), block22);
	Constant* switch96_val97_int = ConstantInt::get(types[7], 2u);
	switch96_var->addCase(cast<ConstantInt>(switch96_val97_int), block22);
	switch96_var->addCase(cast<ConstantInt>(gep46_val46_int), block22);
	Constant* switch96_val98_int = ConstantInt::get(types[7], 8u);
	switch96_var->addCase(cast<ConstantInt>(switch96_val98_int), block23);
	
	builder.SetInsertPoint(block22);
	Constant* binop99_val99_int = ConstantInt::get(types[7], 3u);
	Value* binop99_var = BinaryOperator::CreateNSW(Instruction::Shl, cast86_var, binop99_val99_int, "", builder.GetInsertBlock());
	Value* binop101_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop99_var, "", builder.GetInsertBlock());
	Value* binop102_var = BinaryOperator::Create(Instruction::And, extr95_var, binop101_var, "", builder.GetInsertBlock());
	Value* cmp103_var = builder.CreateICmp(CmpInst::ICMP_NE, binop102_var, gep3_val3_int);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp103_var, types[1]);
	Constant* binop105_val105_int = ConstantInt::get(types[7], 18446744073709551615u);
	Value* binop105_var = BinaryOperator::CreateNSW(Instruction::Add, binop99_var, binop105_val105_int, "", builder.GetInsertBlock());
	Value* binop107_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop105_var, "", builder.GetInsertBlock());
	Value* binop108_var = BinaryOperator::Create(Instruction::And, extr95_var, binop107_var, "", builder.GetInsertBlock());
	Value* cmp109_var = builder.CreateICmp(CmpInst::ICMP_NE, binop108_var, gep3_val3_int);
	Value* cast110_var = builder.CreateCast(Instruction::ZExt, cmp109_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block23);
	ArrayRef<unsigned> extr111_array { 1, };
	Value* extr111_var = builder.CreateExtractValue(call94_var, extr111_array);
	ArrayRef<unsigned> extr112_array { 1, };
	Value* extr112_var = builder.CreateExtractValue(call90_var, extr112_array);
	Value* binop113_var = BinaryOperator::Create(Instruction::Or, extr112_var, extr111_var, "", builder.GetInsertBlock());
	Value* cast114_var = builder.CreateCast(Instruction::ZExt, binop113_var, types[1]);
	Constant* binop115_val115_int = ConstantInt::get(types[7], 63u);
	Value* binop115_var = BinaryOperator::Create(Instruction::LShr, extr95_var, binop115_val115_int, "", builder.GetInsertBlock());
	Value* cast117_var = builder.CreateCast(Instruction::Trunc, binop115_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block24);
	ArrayRef<Value*> gep118_array { gep3_val3_int, gep3_val3_int, };
	Value* gep118_var = builder.CreateInBoundsGEP(globals[7], gep118_array);
	CallInst* call118_var = builder.CreateCall(globals[3], gep118_var);
	call118_var->setTailCall();
	call118_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block25);
	PHINode* phi121_var = builder.CreatePHI(types[1], 2);
	PHINode* phi122_var = builder.CreatePHI(types[1], 2);
	llvm::StoreInst* store123_var = builder.CreateStore(phi121_var, gep87_var, false);
	store123_var->setAlignment(1);
	Constant* binop124_val124_int = ConstantInt::get(types[1], 1u);
	Value* binop124_var = BinaryOperator::Create(Instruction::And, phi122_var, binop124_val124_int, "", builder.GetInsertBlock());
	Constant* gep126_val126_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep126_array { gep3_val3_int, gep87_val87_int, gep126_val126_int, };
	Value* gep126_var = builder.CreateInBoundsGEP(arg0, gep126_array);
	llvm::StoreInst* store128_var = builder.CreateStore(binop124_var, gep126_var, false);
	store128_var->setAlignment(1);
	CallInst* call129_var = builder.CreateCall(globals[8], extr95_var);
	call129_var->setTailCall();
	call129_var->setDoesNotAccessMemory();
	call129_var->setOnlyReadsMemory();
	call129_var->setDoesNotThrow();
	ArrayRef<Value*> gep131_array { gep3_val3_int, gep87_val87_int, switch8_val8_int, };
	Value* gep131_var = builder.CreateInBoundsGEP(arg0, gep131_array);
	Value* cast132_var = builder.CreateCast(Instruction::Trunc, call129_var, types[1]);
	Value* binop133_var = BinaryOperator::Create(Instruction::And, cast132_var, binop124_val124_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store134_var = builder.CreateStore(binop133_var, gep131_var, false);
	store134_var->setAlignment(1);
	Constant* binop135_val135_int = ConstantInt::get(types[7], 15u);
	Value* binop135_var = BinaryOperator::Create(Instruction::And, phi45_var, binop135_val135_int, "", builder.GetInsertBlock());
	Value* binop137_var = BinaryOperator::Create(Instruction::And, phi83_var, binop135_val135_int, "", builder.GetInsertBlock());
	Value* binop138_var = BinaryOperator::CreateNSW(Instruction::Add, binop137_var, binop135_var, "", builder.GetInsertBlock());
	Value* binop139_var = BinaryOperator::Create(Instruction::And, extr92_var, binop135_val135_int, "", builder.GetInsertBlock());
	Value* binop140_var = BinaryOperator::CreateNSW(Instruction::Add, binop139_var, cast93_var, "", builder.GetInsertBlock());
	Value* binop141_var = BinaryOperator::Create(Instruction::Or, binop140_var, binop138_var, "", builder.GetInsertBlock());
	Value* cmp142_var = builder.CreateICmp(CmpInst::ICMP_UGT, binop141_var, binop135_val135_int);
	ArrayRef<Value*> gep143_array { gep3_val3_int, gep87_val87_int, gep19_val19_int, };
	Value* gep143_var = builder.CreateInBoundsGEP(arg0, gep143_array);
	Value* cast144_var = builder.CreateCast(Instruction::ZExt, cmp142_var, types[1]);
	llvm::StoreInst* store145_var = builder.CreateStore(cast144_var, gep143_var, false);
	store145_var->setAlignment(1);
	Value* cmp146_var = builder.CreateICmp(CmpInst::ICMP_EQ, extr95_var, gep3_val3_int);
	ArrayRef<Value*> gep147_array { gep3_val3_int, gep87_val87_int, switch8_val9_int, };
	Value* gep147_var = builder.CreateInBoundsGEP(arg0, gep147_array);
	Value* cast148_var = builder.CreateCast(Instruction::ZExt, cmp146_var, types[1]);
	llvm::StoreInst* store149_var = builder.CreateStore(cast148_var, gep147_var, false);
	store149_var->setAlignment(1);
	Constant* gep150_val150_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep150_array { gep3_val3_int, gep87_val87_int, gep150_val150_int, };
	Value* gep150_var = builder.CreateInBoundsGEP(arg0, gep150_array);
	Value* binop152_var = BinaryOperator::Create(Instruction::Xor, binop124_var, phi121_var, "", builder.GetInsertBlock());
	llvm::StoreInst* store153_var = builder.CreateStore(binop152_var, gep150_var, false);
	store153_var->setAlignment(1);
	llvm::LoadInst* load154_var = builder.CreateLoad(gep3_var, false);
	load154_var->setAlignment(4);
	SwitchInst* switch155_var = builder.CreateSwitch(load154_var, block34, 2);
	switch155_var->addCase(cast<ConstantInt>(switch8_val8_int), block26);
	switch155_var->addCase(cast<ConstantInt>(switch8_val9_int), block27);
	
	builder.SetInsertPoint(block26);
	ArrayRef<Value*> gep155_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep155_var = builder.CreateGEP(arg2, gep155_array);
	llvm::LoadInst* load156_var = builder.CreateLoad(gep155_var, false);
	load156_var->setAlignment(4);
	CallInst* call157_var = builder.CreateCall3(globals[9], arg0, load156_var, extr95_var);
	call157_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block27);
	ArrayRef<Value*> gep159_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep159_var = builder.CreateInBoundsGEP(arg2, gep159_array);
	llvm::LoadInst* load160_var = builder.CreateLoad(gep159_var, false);
	load160_var->setAlignment(4);
	Value* cmp161_var = builder.CreateICmp(CmpInst::ICMP_EQ, load160_var, gep3_val5_int);
	builder.CreateCondBr(cmp161_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call162_var = builder.CreateCall2(globals[1], arg0, load160_var);
	call162_var->setTailCall();
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi163_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep164_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep164_var = builder.CreateInBoundsGEP(arg2, gep164_array);
	llvm::LoadInst* load165_var = builder.CreateLoad(gep164_var, false);
	load165_var->setAlignment(4);
	Value* cmp166_var = builder.CreateICmp(CmpInst::ICMP_EQ, load165_var, gep3_val5_int);
	builder.CreateCondBr(cmp166_var, block31, block30);
	
	builder.SetInsertPoint(block30);
	CallInst* call167_var = builder.CreateCall2(globals[1], arg0, load165_var);
	call167_var->setTailCall();
	ArrayRef<Value*> gep168_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep168_var = builder.CreateInBoundsGEP(arg2, gep168_array);
	llvm::LoadInst* load169_var = builder.CreateLoad(gep168_var, false);
	load169_var->setAlignment(4);
	Value* cast170_var = builder.CreateCast(Instruction::SExt, load169_var, types[7]);
	Value* binop171_var = BinaryOperator::Create(Instruction::Mul, cast170_var, call167_var, "", builder.GetInsertBlock());
	Value* binop172_var = BinaryOperator::Create(Instruction::Add, binop171_var, phi163_var, "", builder.GetInsertBlock());
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block31);
	PHINode* phi173_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep174_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep174_var = builder.CreateInBoundsGEP(arg2, gep174_array);
	llvm::LoadInst* load175_var = builder.CreateLoad(gep174_var, false);
	load175_var->setAlignment(4);
	Value* cmp176_var = builder.CreateICmp(CmpInst::ICMP_EQ, load175_var, gep3_val5_int);
	builder.CreateCondBr(cmp176_var, block33, block32);
	
	builder.SetInsertPoint(block32);
	CallInst* call177_var = builder.CreateCall2(globals[1], arg0, load175_var);
	call177_var->setTailCall();
	Value* binop178_var = BinaryOperator::Create(Instruction::Add, call177_var, phi173_var, "", builder.GetInsertBlock());
	builder.CreateBr(block33);
	
	builder.SetInsertPoint(block33);
	PHINode* phi179_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load180_var = builder.CreateLoad(gep84_var, false);
	load180_var->setAlignment(1);
	Value* cast181_var = builder.CreateCast(Instruction::ZExt, load180_var, types[7]);
	CallInst* call182_var = builder.CreateCall3(globals[10], phi179_var, cast181_var, extr95_var);
	call182_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block34);
	ArrayRef<Value*> gep184_array { gep3_val3_int, gep3_val3_int, };
	Value* gep184_var = builder.CreateInBoundsGEP(globals[11], gep184_array);
	CallInst* call184_var = builder.CreateCall(globals[3], gep184_var);
	call184_var->setTailCall();
	call184_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block35);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi121_var->addIncoming(cast104_var, block22);
	phi121_var->addIncoming(cast114_var, block23);
	
	phi122_var->addIncoming(cast110_var, block22);
	phi122_var->addIncoming(cast117_var, block23);
	
	phi163_var->addIncoming(call162_var, block28);
	phi163_var->addIncoming(gep3_val3_int, block27);
	
	phi173_var->addIncoming(binop172_var, block30);
	phi173_var->addIncoming(phi163_var, block29);
	
	phi179_var->addIncoming(binop178_var, block32);
	phi179_var->addIncoming(phi173_var, block31);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_adcx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_add(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	BasicBlock* block32 = BasicBlock::Create(context, "", function);
	BasicBlock* block33 = BasicBlock::Create(context, "", function);
	BasicBlock* block34 = BasicBlock::Create(context, "", function);
	BasicBlock* block35 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep84_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep84_var = builder.CreateInBoundsGEP(arg2, gep84_array);
	llvm::LoadInst* load85_var = builder.CreateLoad(gep84_var, false);
	load85_var->setAlignment(1);
	Value* cast86_var = builder.CreateCast(Instruction::ZExt, load85_var, types[7]);
	CallInst* call87_var = builder.CreateCall2(globals[6], phi45_var, phi83_var);
	call87_var->setTailCall();
	call87_var->setDoesNotAccessMemory();
	call87_var->setOnlyReadsMemory();
	call87_var->setDoesNotThrow();
	ArrayRef<unsigned> extr89_array { 0, };
	Value* extr89_var = builder.CreateExtractValue(call87_var, extr89_array);
	SwitchInst* switch90_var = builder.CreateSwitch(cast86_var, block24, 4);
	Constant* switch90_val90_int = ConstantInt::get(types[7], 4u);
	switch90_var->addCase(cast<ConstantInt>(switch90_val90_int), block22);
	Constant* switch90_val91_int = ConstantInt::get(types[7], 2u);
	switch90_var->addCase(cast<ConstantInt>(switch90_val91_int), block22);
	switch90_var->addCase(cast<ConstantInt>(gep46_val46_int), block22);
	Constant* switch90_val92_int = ConstantInt::get(types[7], 8u);
	switch90_var->addCase(cast<ConstantInt>(switch90_val92_int), block23);
	
	builder.SetInsertPoint(block22);
	Constant* binop93_val93_int = ConstantInt::get(types[7], 3u);
	Value* binop93_var = BinaryOperator::CreateNSW(Instruction::Shl, cast86_var, binop93_val93_int, "", builder.GetInsertBlock());
	Value* binop95_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop93_var, "", builder.GetInsertBlock());
	Value* binop96_var = BinaryOperator::Create(Instruction::And, binop95_var, extr89_var, "", builder.GetInsertBlock());
	Value* cmp97_var = builder.CreateICmp(CmpInst::ICMP_NE, binop96_var, gep3_val3_int);
	Value* cast98_var = builder.CreateCast(Instruction::ZExt, cmp97_var, types[1]);
	Constant* binop99_val99_int = ConstantInt::get(types[7], 18446744073709551615u);
	Value* binop99_var = BinaryOperator::CreateNSW(Instruction::Add, binop93_var, binop99_val99_int, "", builder.GetInsertBlock());
	Value* binop101_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop99_var, "", builder.GetInsertBlock());
	Value* binop102_var = BinaryOperator::Create(Instruction::And, binop101_var, extr89_var, "", builder.GetInsertBlock());
	Value* cmp103_var = builder.CreateICmp(CmpInst::ICMP_NE, binop102_var, gep3_val3_int);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp103_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block23);
	ArrayRef<unsigned> extr105_array { 1, };
	Value* extr105_var = builder.CreateExtractValue(call87_var, extr105_array);
	Value* cast106_var = builder.CreateCast(Instruction::ZExt, extr105_var, types[1]);
	Constant* binop107_val107_int = ConstantInt::get(types[7], 63u);
	Value* binop107_var = BinaryOperator::Create(Instruction::LShr, extr89_var, binop107_val107_int, "", builder.GetInsertBlock());
	Value* cast109_var = builder.CreateCast(Instruction::Trunc, binop107_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block24);
	ArrayRef<Value*> gep110_array { gep3_val3_int, gep3_val3_int, };
	Value* gep110_var = builder.CreateInBoundsGEP(globals[7], gep110_array);
	CallInst* call110_var = builder.CreateCall(globals[3], gep110_var);
	call110_var->setTailCall();
	call110_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block25);
	PHINode* phi113_var = builder.CreatePHI(types[1], 2);
	PHINode* phi114_var = builder.CreatePHI(types[1], 2);
	Constant* gep115_val115_int = ConstantInt::get(types[3], 24u);
	ArrayRef<Value*> gep115_array { gep3_val3_int, gep115_val115_int, gep3_val5_int, };
	Value* gep115_var = builder.CreateInBoundsGEP(arg0, gep115_array);
	llvm::StoreInst* store117_var = builder.CreateStore(phi113_var, gep115_var, false);
	store117_var->setAlignment(1);
	Constant* binop118_val118_int = ConstantInt::get(types[1], 1u);
	Value* binop118_var = BinaryOperator::Create(Instruction::And, phi114_var, binop118_val118_int, "", builder.GetInsertBlock());
	Constant* gep120_val120_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep120_array { gep3_val3_int, gep115_val115_int, gep120_val120_int, };
	Value* gep120_var = builder.CreateInBoundsGEP(arg0, gep120_array);
	llvm::StoreInst* store122_var = builder.CreateStore(binop118_var, gep120_var, false);
	store122_var->setAlignment(1);
	CallInst* call123_var = builder.CreateCall(globals[8], extr89_var);
	call123_var->setTailCall();
	call123_var->setDoesNotAccessMemory();
	call123_var->setOnlyReadsMemory();
	call123_var->setDoesNotThrow();
	ArrayRef<Value*> gep125_array { gep3_val3_int, gep115_val115_int, switch8_val8_int, };
	Value* gep125_var = builder.CreateInBoundsGEP(arg0, gep125_array);
	Value* cast126_var = builder.CreateCast(Instruction::Trunc, call123_var, types[1]);
	Value* binop127_var = BinaryOperator::Create(Instruction::And, cast126_var, binop118_val118_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store128_var = builder.CreateStore(binop127_var, gep125_var, false);
	store128_var->setAlignment(1);
	Constant* binop129_val129_int = ConstantInt::get(types[7], 15u);
	Value* binop129_var = BinaryOperator::Create(Instruction::And, phi45_var, binop129_val129_int, "", builder.GetInsertBlock());
	Value* binop131_var = BinaryOperator::Create(Instruction::And, phi83_var, binop129_val129_int, "", builder.GetInsertBlock());
	Value* binop132_var = BinaryOperator::CreateNSW(Instruction::Add, binop131_var, binop129_var, "", builder.GetInsertBlock());
	Value* cmp133_var = builder.CreateICmp(CmpInst::ICMP_UGT, binop132_var, binop129_val129_int);
	ArrayRef<Value*> gep134_array { gep3_val3_int, gep115_val115_int, gep19_val19_int, };
	Value* gep134_var = builder.CreateInBoundsGEP(arg0, gep134_array);
	Value* cast135_var = builder.CreateCast(Instruction::ZExt, cmp133_var, types[1]);
	llvm::StoreInst* store136_var = builder.CreateStore(cast135_var, gep134_var, false);
	store136_var->setAlignment(1);
	Value* cmp137_var = builder.CreateICmp(CmpInst::ICMP_EQ, extr89_var, gep3_val3_int);
	ArrayRef<Value*> gep138_array { gep3_val3_int, gep115_val115_int, switch8_val9_int, };
	Value* gep138_var = builder.CreateInBoundsGEP(arg0, gep138_array);
	Value* cast139_var = builder.CreateCast(Instruction::ZExt, cmp137_var, types[1]);
	llvm::StoreInst* store140_var = builder.CreateStore(cast139_var, gep138_var, false);
	store140_var->setAlignment(1);
	Constant* gep141_val141_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep141_array { gep3_val3_int, gep115_val115_int, gep141_val141_int, };
	Value* gep141_var = builder.CreateInBoundsGEP(arg0, gep141_array);
	Value* binop143_var = BinaryOperator::Create(Instruction::Xor, binop118_var, phi113_var, "", builder.GetInsertBlock());
	llvm::StoreInst* store144_var = builder.CreateStore(binop143_var, gep141_var, false);
	store144_var->setAlignment(1);
	llvm::LoadInst* load145_var = builder.CreateLoad(gep3_var, false);
	load145_var->setAlignment(4);
	SwitchInst* switch146_var = builder.CreateSwitch(load145_var, block34, 2);
	switch146_var->addCase(cast<ConstantInt>(switch8_val8_int), block26);
	switch146_var->addCase(cast<ConstantInt>(switch8_val9_int), block27);
	
	builder.SetInsertPoint(block26);
	ArrayRef<Value*> gep146_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep146_var = builder.CreateGEP(arg2, gep146_array);
	llvm::LoadInst* load147_var = builder.CreateLoad(gep146_var, false);
	load147_var->setAlignment(4);
	CallInst* call148_var = builder.CreateCall3(globals[9], arg0, load147_var, extr89_var);
	call148_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block27);
	ArrayRef<Value*> gep150_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep150_var = builder.CreateInBoundsGEP(arg2, gep150_array);
	llvm::LoadInst* load151_var = builder.CreateLoad(gep150_var, false);
	load151_var->setAlignment(4);
	Value* cmp152_var = builder.CreateICmp(CmpInst::ICMP_EQ, load151_var, gep3_val5_int);
	builder.CreateCondBr(cmp152_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call153_var = builder.CreateCall2(globals[1], arg0, load151_var);
	call153_var->setTailCall();
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi154_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep155_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep155_var = builder.CreateInBoundsGEP(arg2, gep155_array);
	llvm::LoadInst* load156_var = builder.CreateLoad(gep155_var, false);
	load156_var->setAlignment(4);
	Value* cmp157_var = builder.CreateICmp(CmpInst::ICMP_EQ, load156_var, gep3_val5_int);
	builder.CreateCondBr(cmp157_var, block31, block30);
	
	builder.SetInsertPoint(block30);
	CallInst* call158_var = builder.CreateCall2(globals[1], arg0, load156_var);
	call158_var->setTailCall();
	ArrayRef<Value*> gep159_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep159_var = builder.CreateInBoundsGEP(arg2, gep159_array);
	llvm::LoadInst* load160_var = builder.CreateLoad(gep159_var, false);
	load160_var->setAlignment(4);
	Value* cast161_var = builder.CreateCast(Instruction::SExt, load160_var, types[7]);
	Value* binop162_var = BinaryOperator::Create(Instruction::Mul, cast161_var, call158_var, "", builder.GetInsertBlock());
	Value* binop163_var = BinaryOperator::Create(Instruction::Add, binop162_var, phi154_var, "", builder.GetInsertBlock());
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block31);
	PHINode* phi164_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep165_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep165_var = builder.CreateInBoundsGEP(arg2, gep165_array);
	llvm::LoadInst* load166_var = builder.CreateLoad(gep165_var, false);
	load166_var->setAlignment(4);
	Value* cmp167_var = builder.CreateICmp(CmpInst::ICMP_EQ, load166_var, gep3_val5_int);
	builder.CreateCondBr(cmp167_var, block33, block32);
	
	builder.SetInsertPoint(block32);
	CallInst* call168_var = builder.CreateCall2(globals[1], arg0, load166_var);
	call168_var->setTailCall();
	Value* binop169_var = BinaryOperator::Create(Instruction::Add, call168_var, phi164_var, "", builder.GetInsertBlock());
	builder.CreateBr(block33);
	
	builder.SetInsertPoint(block33);
	PHINode* phi170_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load171_var = builder.CreateLoad(gep84_var, false);
	load171_var->setAlignment(1);
	Value* cast172_var = builder.CreateCast(Instruction::ZExt, load171_var, types[7]);
	CallInst* call173_var = builder.CreateCall3(globals[10], phi170_var, cast172_var, extr89_var);
	call173_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block34);
	ArrayRef<Value*> gep175_array { gep3_val3_int, gep3_val3_int, };
	Value* gep175_var = builder.CreateInBoundsGEP(globals[11], gep175_array);
	CallInst* call175_var = builder.CreateCall(globals[3], gep175_var);
	call175_var->setTailCall();
	call175_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block35);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi113_var->addIncoming(cast98_var, block22);
	phi113_var->addIncoming(cast106_var, block23);
	
	phi114_var->addIncoming(cast104_var, block22);
	phi114_var->addIncoming(cast109_var, block23);
	
	phi154_var->addIncoming(call153_var, block28);
	phi154_var->addIncoming(gep3_val3_int, block27);
	
	phi164_var->addIncoming(binop163_var, block30);
	phi164_var->addIncoming(phi154_var, block29);
	
	phi170_var->addIncoming(binop169_var, block32);
	phi170_var->addIncoming(phi164_var, block31);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_addsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_adox(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aesdec(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aesdeclast(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aesenc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aesenclast(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aesimc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_aeskeygenassist(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_and(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	Value* binop84_var = BinaryOperator::Create(Instruction::And, phi83_var, phi45_var, "", builder.GetInsertBlock());
	Constant* gep85_val85_int = ConstantInt::get(types[3], 24u);
	Constant* gep85_val86_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep85_array { gep3_val3_int, gep85_val85_int, gep85_val86_int, };
	Value* gep85_var = builder.CreateInBoundsGEP(arg0, gep85_array);
	Constant* store88_val88_int = ConstantInt::get(types[1], 0u);
	llvm::StoreInst* store88_var = builder.CreateStore(store88_val88_int, gep85_var, false);
	store88_var->setAlignment(1);
	ArrayRef<Value*> gep90_array { gep3_val3_int, gep85_val85_int, gep3_val5_int, };
	Value* gep90_var = builder.CreateInBoundsGEP(arg0, gep90_array);
	llvm::StoreInst* store91_var = builder.CreateStore(store88_val88_int, gep90_var, false);
	store91_var->setAlignment(1);
	ArrayRef<Value*> gep92_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep92_var = builder.CreateInBoundsGEP(arg2, gep92_array);
	llvm::LoadInst* load93_var = builder.CreateLoad(gep92_var, false);
	load93_var->setAlignment(1);
	Value* cast94_var = builder.CreateCast(Instruction::ZExt, load93_var, types[7]);
	Constant* binop95_val95_int = ConstantInt::get(types[7], 3u);
	Value* binop95_var = BinaryOperator::CreateNSW(Instruction::Shl, cast94_var, binop95_val95_int, "", builder.GetInsertBlock());
	Constant* binop97_val97_int = ConstantInt::get(types[7], 4294967295u);
	Value* binop97_var = BinaryOperator::CreateNSW(Instruction::Add, binop95_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop99_var = BinaryOperator::Create(Instruction::And, binop97_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop100_var = BinaryOperator::Create(Instruction::LShr, binop84_var, binop99_var, "", builder.GetInsertBlock());
	Value* cmp101_var = builder.CreateICmp(CmpInst::ICMP_NE, binop100_var, gep3_val3_int);
	Constant* gep102_val102_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep102_array { gep3_val3_int, gep85_val85_int, gep102_val102_int, };
	Value* gep102_var = builder.CreateInBoundsGEP(arg0, gep102_array);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp101_var, types[1]);
	llvm::StoreInst* store105_var = builder.CreateStore(cast104_var, gep102_var, false);
	store105_var->setAlignment(1);
	CallInst* call106_var = builder.CreateCall(globals[8], binop84_var);
	call106_var->setTailCall();
	call106_var->setDoesNotAccessMemory();
	call106_var->setOnlyReadsMemory();
	call106_var->setDoesNotThrow();
	ArrayRef<Value*> gep108_array { gep3_val3_int, gep85_val85_int, switch8_val8_int, };
	Value* gep108_var = builder.CreateInBoundsGEP(arg0, gep108_array);
	Value* cast109_var = builder.CreateCast(Instruction::Trunc, call106_var, types[1]);
	Constant* binop110_val110_int = ConstantInt::get(types[1], 1u);
	Value* binop110_var = BinaryOperator::Create(Instruction::And, cast109_var, binop110_val110_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store112_var = builder.CreateStore(binop110_var, gep108_var, false);
	store112_var->setAlignment(1);
	Value* cmp113_var = builder.CreateICmp(CmpInst::ICMP_EQ, binop84_var, gep3_val3_int);
	ArrayRef<Value*> gep114_array { gep3_val3_int, gep85_val85_int, switch8_val9_int, };
	Value* gep114_var = builder.CreateInBoundsGEP(arg0, gep114_array);
	Value* cast115_var = builder.CreateCast(Instruction::ZExt, cmp113_var, types[1]);
	llvm::StoreInst* store116_var = builder.CreateStore(cast115_var, gep114_var, false);
	store116_var->setAlignment(1);
	ArrayRef<Value*> gep117_array { gep3_val3_int, gep85_val85_int, gep19_val19_int, };
	Value* gep117_var = builder.CreateInBoundsGEP(arg0, gep117_array);
	llvm::StoreInst* store118_var = builder.CreateStore(store88_val88_int, gep117_var, false);
	store118_var->setAlignment(1);
	llvm::LoadInst* load119_var = builder.CreateLoad(gep3_var, false);
	load119_var->setAlignment(4);
	SwitchInst* switch120_var = builder.CreateSwitch(load119_var, block30, 2);
	switch120_var->addCase(cast<ConstantInt>(switch8_val8_int), block22);
	switch120_var->addCase(cast<ConstantInt>(switch8_val9_int), block23);
	
	builder.SetInsertPoint(block22);
	ArrayRef<Value*> gep120_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep120_var = builder.CreateGEP(arg2, gep120_array);
	llvm::LoadInst* load121_var = builder.CreateLoad(gep120_var, false);
	load121_var->setAlignment(4);
	CallInst* call122_var = builder.CreateCall3(globals[9], arg0, load121_var, binop84_var);
	call122_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block23);
	ArrayRef<Value*> gep124_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep124_var = builder.CreateInBoundsGEP(arg2, gep124_array);
	llvm::LoadInst* load125_var = builder.CreateLoad(gep124_var, false);
	load125_var->setAlignment(4);
	Value* cmp126_var = builder.CreateICmp(CmpInst::ICMP_EQ, load125_var, gep3_val5_int);
	builder.CreateCondBr(cmp126_var, block25, block24);
	
	builder.SetInsertPoint(block24);
	CallInst* call127_var = builder.CreateCall2(globals[1], arg0, load125_var);
	call127_var->setTailCall();
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block25);
	PHINode* phi128_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep129_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep129_var = builder.CreateInBoundsGEP(arg2, gep129_array);
	llvm::LoadInst* load130_var = builder.CreateLoad(gep129_var, false);
	load130_var->setAlignment(4);
	Value* cmp131_var = builder.CreateICmp(CmpInst::ICMP_EQ, load130_var, gep3_val5_int);
	builder.CreateCondBr(cmp131_var, block27, block26);
	
	builder.SetInsertPoint(block26);
	CallInst* call132_var = builder.CreateCall2(globals[1], arg0, load130_var);
	call132_var->setTailCall();
	ArrayRef<Value*> gep133_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep133_var = builder.CreateInBoundsGEP(arg2, gep133_array);
	llvm::LoadInst* load134_var = builder.CreateLoad(gep133_var, false);
	load134_var->setAlignment(4);
	Value* cast135_var = builder.CreateCast(Instruction::SExt, load134_var, types[7]);
	Value* binop136_var = BinaryOperator::Create(Instruction::Mul, cast135_var, call132_var, "", builder.GetInsertBlock());
	Value* binop137_var = BinaryOperator::Create(Instruction::Add, binop136_var, phi128_var, "", builder.GetInsertBlock());
	builder.CreateBr(block27);
	
	builder.SetInsertPoint(block27);
	PHINode* phi138_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep139_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep139_var = builder.CreateInBoundsGEP(arg2, gep139_array);
	llvm::LoadInst* load140_var = builder.CreateLoad(gep139_var, false);
	load140_var->setAlignment(4);
	Value* cmp141_var = builder.CreateICmp(CmpInst::ICMP_EQ, load140_var, gep3_val5_int);
	builder.CreateCondBr(cmp141_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call142_var = builder.CreateCall2(globals[1], arg0, load140_var);
	call142_var->setTailCall();
	Value* binop143_var = BinaryOperator::Create(Instruction::Add, call142_var, phi138_var, "", builder.GetInsertBlock());
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi144_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load145_var = builder.CreateLoad(gep92_var, false);
	load145_var->setAlignment(1);
	Value* cast146_var = builder.CreateCast(Instruction::ZExt, load145_var, types[7]);
	CallInst* call147_var = builder.CreateCall3(globals[10], phi144_var, cast146_var, binop84_var);
	call147_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block30);
	ArrayRef<Value*> gep149_array { gep3_val3_int, gep3_val3_int, };
	Value* gep149_var = builder.CreateInBoundsGEP(globals[11], gep149_array);
	CallInst* call149_var = builder.CreateCall(globals[3], gep149_var);
	call149_var->setTailCall();
	call149_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block31);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi128_var->addIncoming(call127_var, block24);
	phi128_var->addIncoming(gep3_val3_int, block23);
	
	phi138_var->addIncoming(binop137_var, block26);
	phi138_var->addIncoming(phi128_var, block25);
	
	phi144_var->addIncoming(binop143_var, block28);
	phi144_var->addIncoming(phi138_var, block27);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_andn(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_andnpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_andnps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_andpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_andps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_arpl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bextr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blcfill(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blci(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blcic(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blcmsk(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blcs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blendpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blendps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blendvpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blendvps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blsfill(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blsi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blsic(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blsmsk(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_blsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bound(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bsf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bswap(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_btc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_btr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bts(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_bzhi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_call(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block10, 3);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 2u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	Constant* switch8_val10_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val10_int), block3);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep11_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, };
	Value* gep11_var = builder.CreateInBoundsGEP(arg2, gep11_array);
	Value* cast12_var = builder.CreateCast(Instruction::BitCast, gep11_var, types[24]);
	llvm::LoadInst* load13_var = builder.CreateLoad(cast12_var, false);
	load13_var->setAlignment(8);
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	CallInst* call16_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call16_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep18_var = builder.CreateInBoundsGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	Value* cmp20_var = builder.CreateICmp(CmpInst::ICMP_EQ, load19_var, gep3_val5_int);
	builder.CreateCondBr(cmp20_var, block5, block4);
	
	builder.SetInsertPoint(block4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call21_var->setTailCall();
	builder.CreateBr(block5);
	
	builder.SetInsertPoint(block5);
	PHINode* phi22_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val8_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	ArrayRef<Value*> gep27_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val10_int, };
	Value* gep27_var = builder.CreateInBoundsGEP(arg2, gep27_array);
	llvm::LoadInst* load28_var = builder.CreateLoad(gep27_var, false);
	load28_var->setAlignment(4);
	Value* cast29_var = builder.CreateCast(Instruction::SExt, load28_var, types[7]);
	Value* binop30_var = BinaryOperator::Create(Instruction::Mul, cast29_var, call26_var, "", builder.GetInsertBlock());
	Value* binop31_var = BinaryOperator::Create(Instruction::Add, binop30_var, phi22_var, "", builder.GetInsertBlock());
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi32_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val9_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cmp35_var = builder.CreateICmp(CmpInst::ICMP_EQ, load34_var, gep3_val5_int);
	builder.CreateCondBr(cmp35_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call36_var = builder.CreateCall2(globals[1], arg0, load34_var);
	call36_var->setTailCall();
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, call36_var, phi32_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(1);
	Value* cast41_var = builder.CreateCast(Instruction::ZExt, load40_var, types[7]);
	CallInst* call42_var = builder.CreateCall2(globals[2], phi38_var, cast41_var);
	call42_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block10);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep3_val3_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(globals[5], gep45_array);
	CallInst* call44_var = builder.CreateCall(globals[3], gep45_var);
	call44_var->setTailCall();
	call44_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block11);
	PHINode* phi48_var = builder.CreatePHI(types[7], 3);
	CallInst* call49_var = builder.CreateCall2(globals[12], phi48_var, arg0);
	call49_var->setTailCall();
	phi22_var->addIncoming(call21_var, block4);
	phi22_var->addIncoming(gep3_val3_int, block3);
	
	phi32_var->addIncoming(binop31_var, block6);
	phi32_var->addIncoming(phi22_var, block5);
	
	phi38_var->addIncoming(binop37_var, block8);
	phi38_var->addIncoming(phi32_var, block7);
	
	phi48_var->addIncoming(call42_var, block9);
	phi48_var->addIncoming(call16_var, block2);
	phi48_var->addIncoming(load13_var, block1);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cdqe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_clac(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_clc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_clflush(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_clgi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cli(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_clts(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmova(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovae(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmove(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovge(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovle(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovne(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovno(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovnp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovns(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovo(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmovs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block10, 3);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 2u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	Constant* switch8_val10_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val10_int), block3);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep11_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, };
	Value* gep11_var = builder.CreateInBoundsGEP(arg2, gep11_array);
	Value* cast12_var = builder.CreateCast(Instruction::BitCast, gep11_var, types[24]);
	llvm::LoadInst* load13_var = builder.CreateLoad(cast12_var, false);
	load13_var->setAlignment(8);
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	CallInst* call16_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call16_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep18_var = builder.CreateInBoundsGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	Value* cmp20_var = builder.CreateICmp(CmpInst::ICMP_EQ, load19_var, gep3_val5_int);
	builder.CreateCondBr(cmp20_var, block5, block4);
	
	builder.SetInsertPoint(block4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call21_var->setTailCall();
	builder.CreateBr(block5);
	
	builder.SetInsertPoint(block5);
	PHINode* phi22_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val8_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	ArrayRef<Value*> gep27_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val10_int, };
	Value* gep27_var = builder.CreateInBoundsGEP(arg2, gep27_array);
	llvm::LoadInst* load28_var = builder.CreateLoad(gep27_var, false);
	load28_var->setAlignment(4);
	Value* cast29_var = builder.CreateCast(Instruction::SExt, load28_var, types[7]);
	Value* binop30_var = BinaryOperator::Create(Instruction::Mul, cast29_var, call26_var, "", builder.GetInsertBlock());
	Value* binop31_var = BinaryOperator::Create(Instruction::Add, binop30_var, phi22_var, "", builder.GetInsertBlock());
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi32_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val9_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cmp35_var = builder.CreateICmp(CmpInst::ICMP_EQ, load34_var, gep3_val5_int);
	builder.CreateCondBr(cmp35_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call36_var = builder.CreateCall2(globals[1], arg0, load34_var);
	call36_var->setTailCall();
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, call36_var, phi32_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(1);
	Value* cast41_var = builder.CreateCast(Instruction::ZExt, load40_var, types[7]);
	CallInst* call42_var = builder.CreateCall2(globals[2], phi38_var, cast41_var);
	call42_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block10);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep3_val3_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(globals[5], gep45_array);
	CallInst* call44_var = builder.CreateCall(globals[3], gep45_var);
	call44_var->setTailCall();
	call44_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block11);
	PHINode* phi48_var = builder.CreatePHI(types[7], 3);
	Constant* gep49_val49_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, gep3_val5_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	llvm::LoadInst* load51_var = builder.CreateLoad(gep49_var, false);
	load51_var->setAlignment(4);
	SwitchInst* switch52_var = builder.CreateSwitch(load51_var, block21, 3);
	switch52_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch52_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	switch52_var->addCase(cast<ConstantInt>(switch8_val10_int), block14);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, };
	Value* gep52_var = builder.CreateInBoundsGEP(arg2, gep52_array);
	Value* cast53_var = builder.CreateCast(Instruction::BitCast, gep52_var, types[24]);
	llvm::LoadInst* load54_var = builder.CreateLoad(cast53_var, false);
	load54_var->setAlignment(8);
	builder.CreateBr(block22);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	CallInst* call57_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call57_var->setTailCall();
	builder.CreateBr(block22);
	
	builder.SetInsertPoint(block14);
	ArrayRef<Value*> gep58_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep58_var = builder.CreateInBoundsGEP(arg2, gep58_array);
	llvm::LoadInst* load59_var = builder.CreateLoad(gep58_var, false);
	load59_var->setAlignment(4);
	Value* cmp60_var = builder.CreateICmp(CmpInst::ICMP_EQ, load59_var, gep3_val5_int);
	builder.CreateCondBr(cmp60_var, block16, block15);
	
	builder.SetInsertPoint(block15);
	CallInst* call61_var = builder.CreateCall2(globals[1], arg0, load59_var);
	call61_var->setTailCall();
	builder.CreateBr(block16);
	
	builder.SetInsertPoint(block16);
	PHINode* phi62_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep63_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, gep3_val5_int, switch8_val8_int, };
	Value* gep63_var = builder.CreateInBoundsGEP(arg2, gep63_array);
	llvm::LoadInst* load64_var = builder.CreateLoad(gep63_var, false);
	load64_var->setAlignment(4);
	Value* cmp65_var = builder.CreateICmp(CmpInst::ICMP_EQ, load64_var, gep3_val5_int);
	builder.CreateCondBr(cmp65_var, block18, block17);
	
	builder.SetInsertPoint(block17);
	CallInst* call66_var = builder.CreateCall2(globals[1], arg0, load64_var);
	call66_var->setTailCall();
	ArrayRef<Value*> gep67_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, gep3_val5_int, switch8_val10_int, };
	Value* gep67_var = builder.CreateInBoundsGEP(arg2, gep67_array);
	llvm::LoadInst* load68_var = builder.CreateLoad(gep67_var, false);
	load68_var->setAlignment(4);
	Value* cast69_var = builder.CreateCast(Instruction::SExt, load68_var, types[7]);
	Value* binop70_var = BinaryOperator::Create(Instruction::Mul, cast69_var, call66_var, "", builder.GetInsertBlock());
	Value* binop71_var = BinaryOperator::Create(Instruction::Add, binop70_var, phi62_var, "", builder.GetInsertBlock());
	builder.CreateBr(block18);
	
	builder.SetInsertPoint(block18);
	PHINode* phi72_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep73_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val9_int, gep3_val5_int, switch8_val9_int, };
	Value* gep73_var = builder.CreateInBoundsGEP(arg2, gep73_array);
	llvm::LoadInst* load74_var = builder.CreateLoad(gep73_var, false);
	load74_var->setAlignment(4);
	Value* cmp75_var = builder.CreateICmp(CmpInst::ICMP_EQ, load74_var, gep3_val5_int);
	builder.CreateCondBr(cmp75_var, block20, block19);
	
	builder.SetInsertPoint(block19);
	CallInst* call76_var = builder.CreateCall2(globals[1], arg0, load74_var);
	call76_var->setTailCall();
	Value* binop77_var = BinaryOperator::Create(Instruction::Add, call76_var, phi72_var, "", builder.GetInsertBlock());
	builder.CreateBr(block20);
	
	builder.SetInsertPoint(block20);
	PHINode* phi78_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep79_array { gep3_val3_int, gep3_val4_int, gep49_val49_int, switch8_val8_int, };
	Value* gep79_var = builder.CreateInBoundsGEP(arg2, gep79_array);
	llvm::LoadInst* load80_var = builder.CreateLoad(gep79_var, false);
	load80_var->setAlignment(1);
	Value* cast81_var = builder.CreateCast(Instruction::ZExt, load80_var, types[7]);
	CallInst* call82_var = builder.CreateCall2(globals[2], phi78_var, cast81_var);
	call82_var->setTailCall();
	builder.CreateBr(block22);
	
	builder.SetInsertPoint(block21);
	CallInst* call83_var = builder.CreateCall(globals[3], gep45_var);
	call83_var->setTailCall();
	call83_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block22);
	PHINode* phi84_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep85_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep85_var = builder.CreateInBoundsGEP(arg2, gep85_array);
	llvm::LoadInst* load86_var = builder.CreateLoad(gep85_var, false);
	load86_var->setAlignment(1);
	Value* cast87_var = builder.CreateCast(Instruction::ZExt, load86_var, types[7]);
	Value* binop88_var = BinaryOperator::Create(Instruction::Sub, gep3_val3_int, phi84_var, "", builder.GetInsertBlock());
	CallInst* call89_var = builder.CreateCall2(globals[6], phi48_var, binop88_var);
	call89_var->setTailCall();
	call89_var->setDoesNotAccessMemory();
	call89_var->setOnlyReadsMemory();
	call89_var->setDoesNotThrow();
	ArrayRef<unsigned> extr91_array { 0, };
	Value* extr91_var = builder.CreateExtractValue(call89_var, extr91_array);
	SwitchInst* switch92_var = builder.CreateSwitch(cast87_var, block25, 4);
	Constant* switch92_val92_int = ConstantInt::get(types[7], 4u);
	switch92_var->addCase(cast<ConstantInt>(switch92_val92_int), block23);
	Constant* switch92_val93_int = ConstantInt::get(types[7], 2u);
	switch92_var->addCase(cast<ConstantInt>(switch92_val93_int), block23);
	switch92_var->addCase(cast<ConstantInt>(gep49_val49_int), block23);
	Constant* switch92_val94_int = ConstantInt::get(types[7], 8u);
	switch92_var->addCase(cast<ConstantInt>(switch92_val94_int), block24);
	
	builder.SetInsertPoint(block23);
	Constant* binop95_val95_int = ConstantInt::get(types[7], 3u);
	Value* binop95_var = BinaryOperator::CreateNSW(Instruction::Shl, cast87_var, binop95_val95_int, "", builder.GetInsertBlock());
	Value* binop97_var = BinaryOperator::Create(Instruction::Shl, gep49_val49_int, binop95_var, "", builder.GetInsertBlock());
	Value* binop98_var = BinaryOperator::Create(Instruction::And, binop97_var, extr91_var, "", builder.GetInsertBlock());
	Value* cmp99_var = builder.CreateICmp(CmpInst::ICMP_NE, binop98_var, gep3_val3_int);
	Value* cast100_var = builder.CreateCast(Instruction::ZExt, cmp99_var, types[1]);
	Constant* binop101_val101_int = ConstantInt::get(types[7], 18446744073709551615u);
	Value* binop101_var = BinaryOperator::CreateNSW(Instruction::Add, binop95_var, binop101_val101_int, "", builder.GetInsertBlock());
	Value* binop103_var = BinaryOperator::Create(Instruction::Shl, gep49_val49_int, binop101_var, "", builder.GetInsertBlock());
	Value* binop104_var = BinaryOperator::Create(Instruction::And, binop103_var, extr91_var, "", builder.GetInsertBlock());
	Value* cmp105_var = builder.CreateICmp(CmpInst::ICMP_NE, binop104_var, gep3_val3_int);
	Value* cast106_var = builder.CreateCast(Instruction::ZExt, cmp105_var, types[1]);
	builder.CreateBr(block26);
	
	builder.SetInsertPoint(block24);
	ArrayRef<unsigned> extr107_array { 1, };
	Value* extr107_var = builder.CreateExtractValue(call89_var, extr107_array);
	Value* cast108_var = builder.CreateCast(Instruction::ZExt, extr107_var, types[1]);
	Constant* binop109_val109_int = ConstantInt::get(types[7], 63u);
	Value* binop109_var = BinaryOperator::Create(Instruction::LShr, extr91_var, binop109_val109_int, "", builder.GetInsertBlock());
	Value* cast111_var = builder.CreateCast(Instruction::Trunc, binop109_var, types[1]);
	builder.CreateBr(block26);
	
	builder.SetInsertPoint(block25);
	ArrayRef<Value*> gep112_array { gep3_val3_int, gep3_val3_int, };
	Value* gep112_var = builder.CreateInBoundsGEP(globals[7], gep112_array);
	CallInst* call112_var = builder.CreateCall(globals[3], gep112_var);
	call112_var->setTailCall();
	call112_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block26);
	PHINode* phi115_var = builder.CreatePHI(types[1], 2);
	PHINode* phi116_var = builder.CreatePHI(types[1], 2);
	Constant* gep117_val117_int = ConstantInt::get(types[3], 24u);
	ArrayRef<Value*> gep117_array { gep3_val3_int, gep117_val117_int, gep3_val5_int, };
	Value* gep117_var = builder.CreateInBoundsGEP(arg0, gep117_array);
	Constant* binop119_val119_int = ConstantInt::get(types[1], 1u);
	Value* binop119_var = BinaryOperator::Create(Instruction::And, phi116_var, binop119_val119_int, "", builder.GetInsertBlock());
	Constant* gep121_val121_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep121_array { gep3_val3_int, gep117_val117_int, gep121_val121_int, };
	Value* gep121_var = builder.CreateInBoundsGEP(arg0, gep121_array);
	llvm::StoreInst* store123_var = builder.CreateStore(binop119_var, gep121_var, false);
	store123_var->setAlignment(1);
	CallInst* call124_var = builder.CreateCall(globals[8], extr91_var);
	call124_var->setTailCall();
	call124_var->setDoesNotAccessMemory();
	call124_var->setOnlyReadsMemory();
	call124_var->setDoesNotThrow();
	ArrayRef<Value*> gep126_array { gep3_val3_int, gep117_val117_int, switch8_val9_int, };
	Value* gep126_var = builder.CreateInBoundsGEP(arg0, gep126_array);
	Value* cast127_var = builder.CreateCast(Instruction::Trunc, call124_var, types[1]);
	Value* binop128_var = BinaryOperator::Create(Instruction::And, cast127_var, binop119_val119_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store129_var = builder.CreateStore(binop128_var, gep126_var, false);
	store129_var->setAlignment(1);
	Constant* binop130_val130_int = ConstantInt::get(types[7], 15u);
	Value* binop130_var = BinaryOperator::Create(Instruction::And, phi48_var, binop130_val130_int, "", builder.GetInsertBlock());
	Value* binop132_var = BinaryOperator::Create(Instruction::And, binop88_var, binop130_val130_int, "", builder.GetInsertBlock());
	Value* binop133_var = BinaryOperator::CreateNSW(Instruction::Add, binop132_var, binop130_var, "", builder.GetInsertBlock());
	Constant* cmp134_val134_int = ConstantInt::get(types[7], 16u);
	Value* cmp134_var = builder.CreateICmp(CmpInst::ICMP_ULT, binop133_var, cmp134_val134_int);
	ArrayRef<Value*> gep136_array { gep3_val3_int, gep117_val117_int, switch8_val8_int, };
	Value* gep136_var = builder.CreateInBoundsGEP(arg0, gep136_array);
	Value* cmp137_var = builder.CreateICmp(CmpInst::ICMP_EQ, extr91_var, gep3_val3_int);
	ArrayRef<Value*> gep138_array { gep3_val3_int, gep117_val117_int, switch8_val10_int, };
	Value* gep138_var = builder.CreateInBoundsGEP(arg0, gep138_array);
	Value* cast139_var = builder.CreateCast(Instruction::ZExt, cmp137_var, types[1]);
	llvm::StoreInst* store140_var = builder.CreateStore(cast139_var, gep138_var, false);
	store140_var->setAlignment(1);
	Constant* gep141_val141_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep141_array { gep3_val3_int, gep117_val117_int, gep141_val141_int, };
	Value* gep141_var = builder.CreateInBoundsGEP(arg0, gep141_array);
	Value* binop143_var = BinaryOperator::Create(Instruction::Xor, binop119_var, phi115_var, "", builder.GetInsertBlock());
	llvm::StoreInst* store144_var = builder.CreateStore(binop143_var, gep141_var, false);
	store144_var->setAlignment(1);
	Value* binop145_var = BinaryOperator::Create(Instruction::Xor, phi115_var, binop119_val119_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store146_var = builder.CreateStore(binop145_var, gep117_var, false);
	store146_var->setAlignment(1);
	Value* cast147_var = builder.CreateCast(Instruction::ZExt, cmp134_var, types[1]);
	llvm::StoreInst* store148_var = builder.CreateStore(cast147_var, gep136_var, false);
	store148_var->setAlignment(1);
	phi22_var->addIncoming(call21_var, block4);
	phi22_var->addIncoming(gep3_val3_int, block3);
	
	phi32_var->addIncoming(binop31_var, block6);
	phi32_var->addIncoming(phi22_var, block5);
	
	phi38_var->addIncoming(binop37_var, block8);
	phi38_var->addIncoming(phi32_var, block7);
	
	phi48_var->addIncoming(call42_var, block9);
	phi48_var->addIncoming(call16_var, block2);
	phi48_var->addIncoming(load13_var, block1);
	
	phi62_var->addIncoming(call61_var, block15);
	phi62_var->addIncoming(gep3_val3_int, block14);
	
	phi72_var->addIncoming(binop71_var, block17);
	phi72_var->addIncoming(phi62_var, block16);
	
	phi78_var->addIncoming(binop77_var, block19);
	phi78_var->addIncoming(phi72_var, block18);
	
	phi84_var->addIncoming(call82_var, block20);
	phi84_var->addIncoming(call57_var, block13);
	phi84_var->addIncoming(load54_var, block12);
	
	phi115_var->addIncoming(cast100_var, block23);
	phi115_var->addIncoming(cast108_var, block24);
	
	phi116_var->addIncoming(cast106_var, block23);
	phi116_var->addIncoming(cast111_var, block24);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmppd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpxchg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpxchg16b(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cmpxchg8b(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_comisd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_comiss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cpuid(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cqo(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_crc32(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtdq2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtdq2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtpd2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtpd2pi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtpd2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtpi2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtpi2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtps2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtps2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtps2pi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtsd2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtsd2ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtsi2sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtsi2ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtss2sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvtss2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttpd2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttpd2pi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttps2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttps2pi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttsd2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cvttss2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_cwde(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_daa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_das(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_data16(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_dec(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_div(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_divpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_divps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_divsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_divss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_dppd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_dpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_emms(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_encls(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_enclu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_enter(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_extractps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_extrq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_f2xm1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fabs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fadd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_faddp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fbld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fbstp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fchs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmove(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovnb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovnbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovne(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovnu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcmovu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcom(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcomi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcomp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcompi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcompp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fcos(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fdecstp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fdiv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fdivp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fdivr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fdivrp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_femms(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ffree(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fiadd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ficom(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ficomp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fidiv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fidivr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fild(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fimul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fincstp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fist(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fistp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fisttp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fisub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fisubr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fld1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldcw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldenv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldl2e(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldl2t(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldlg2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldln2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldpi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fldz(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fmul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fmulp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnclex(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fninit(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnop(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnsave(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnstcw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnstenv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fnstsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fpatan(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fprem(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fprem1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fptan(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_frndint(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_frstor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fscale(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsetpm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsin(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsincos(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsqrt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fst(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fstp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fstpnce(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsubp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsubr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fsubrp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ftst(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fucom(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fucomi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fucomp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fucompi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fucompp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxam(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxch(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxrstor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxrstor64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxsave(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxsave64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fxtract(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fyl2x(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_fyl2xp1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_getsec(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_haddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_haddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_hlt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_hsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_hsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_idiv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_imul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_in(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_inc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_insb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_insd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_insertps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_insertq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_insw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_int(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_int1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_int3(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_into(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invept(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invlpg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invlpga(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invpcid(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_invvpid(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_iret(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_iretd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_iretq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ja(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block14);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep10_val10_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg0, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(1);
	Value* cmp13_var = builder.CreateICmp(CmpInst::ICMP_EQ, load12_var, cmp8_val8_int);
	builder.CreateCondBr(cmp13_var, block2, block14);
	
	builder.SetInsertPoint(block2);
	Constant* gep14_val14_int = ConstantInt::get(types[3], 15u);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load16_var = builder.CreateLoad(gep14_var, false);
	load16_var->setAlignment(4);
	SwitchInst* switch17_var = builder.CreateSwitch(load16_var, block12, 3);
	Constant* switch17_val17_int = ConstantInt::get(types[3], 2u);
	switch17_var->addCase(cast<ConstantInt>(switch17_val17_int), block3);
	Constant* switch17_val18_int = ConstantInt::get(types[3], 1u);
	switch17_var->addCase(cast<ConstantInt>(switch17_val18_int), block4);
	switch17_var->addCase(cast<ConstantInt>(gep10_val10_int), block5);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	Value* cast20_var = builder.CreateCast(Instruction::BitCast, gep19_var, types[24]);
	llvm::LoadInst* load21_var = builder.CreateLoad(cast20_var, false);
	load21_var->setAlignment(8);
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep22_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep3_val5_int, };
	Value* gep22_var = builder.CreateGEP(arg2, gep22_array);
	llvm::LoadInst* load23_var = builder.CreateLoad(gep22_var, false);
	load23_var->setAlignment(4);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load23_var);
	call24_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block5);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep3_val5_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep3_val5_int);
	builder.CreateCondBr(cmp28_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi30_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep31_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, switch17_val17_int, };
	Value* gep31_var = builder.CreateInBoundsGEP(arg2, gep31_array);
	llvm::LoadInst* load32_var = builder.CreateLoad(gep31_var, false);
	load32_var->setAlignment(4);
	Value* cmp33_var = builder.CreateICmp(CmpInst::ICMP_EQ, load32_var, gep3_val5_int);
	builder.CreateCondBr(cmp33_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call34_var = builder.CreateCall2(globals[1], arg0, load32_var);
	call34_var->setTailCall();
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep10_val10_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cast37_var = builder.CreateCast(Instruction::SExt, load36_var, types[7]);
	Value* binop38_var = BinaryOperator::Create(Instruction::Mul, cast37_var, call34_var, "", builder.GetInsertBlock());
	Value* binop39_var = BinaryOperator::Create(Instruction::Add, binop38_var, phi30_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi40_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep41_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, switch17_val18_int, };
	Value* gep41_var = builder.CreateInBoundsGEP(arg2, gep41_array);
	llvm::LoadInst* load42_var = builder.CreateLoad(gep41_var, false);
	load42_var->setAlignment(4);
	Value* cmp43_var = builder.CreateICmp(CmpInst::ICMP_EQ, load42_var, gep3_val5_int);
	builder.CreateCondBr(cmp43_var, block11, block10);
	
	builder.SetInsertPoint(block10);
	CallInst* call44_var = builder.CreateCall2(globals[1], arg0, load42_var);
	call44_var->setTailCall();
	Value* binop45_var = BinaryOperator::Create(Instruction::Add, call44_var, phi40_var, "", builder.GetInsertBlock());
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block11);
	PHINode* phi46_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep47_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val17_int, };
	Value* gep47_var = builder.CreateInBoundsGEP(arg2, gep47_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep47_var, false);
	load48_var->setAlignment(1);
	Value* cast49_var = builder.CreateCast(Instruction::ZExt, load48_var, types[7]);
	CallInst* call50_var = builder.CreateCall2(globals[2], phi46_var, cast49_var);
	call50_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep53_array { gep3_val3_int, gep3_val3_int, };
	Value* gep53_var = builder.CreateInBoundsGEP(globals[5], gep53_array);
	CallInst* call52_var = builder.CreateCall(globals[3], gep53_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	PHINode* phi56_var = builder.CreatePHI(types[7], 3);
	CallInst* call57_var = builder.CreateCall3(globals[13], arg1, arg0, phi56_var);
	call57_var->setTailCall();
	call57_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block14);
	phi30_var->addIncoming(call29_var, block6);
	phi30_var->addIncoming(gep3_val3_int, block5);
	
	phi40_var->addIncoming(binop39_var, block8);
	phi40_var->addIncoming(phi30_var, block7);
	
	phi46_var->addIncoming(binop45_var, block10);
	phi46_var->addIncoming(phi40_var, block9);
	
	phi56_var->addIncoming(call50_var, block11);
	phi56_var->addIncoming(call24_var, block4);
	phi56_var->addIncoming(load21_var, block3);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jae(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(4);
	SwitchInst* switch13_var = builder.CreateSwitch(load12_var, block11, 3);
	Constant* switch13_val13_int = ConstantInt::get(types[3], 2u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val13_int), block2);
	Constant* switch13_val14_int = ConstantInt::get(types[3], 1u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val14_int), block3);
	Constant* switch13_val15_int = ConstantInt::get(types[3], 3u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val15_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, gep3_val5_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, gep3_val5_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val13_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep3_val5_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val15_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val14_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep3_val5_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val13_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(4);
	SwitchInst* switch13_var = builder.CreateSwitch(load12_var, block11, 3);
	Constant* switch13_val13_int = ConstantInt::get(types[3], 2u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val13_int), block2);
	Constant* switch13_val14_int = ConstantInt::get(types[3], 1u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val14_int), block3);
	Constant* switch13_val15_int = ConstantInt::get(types[3], 3u);
	switch13_var->addCase(cast<ConstantInt>(switch13_val15_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, gep3_val5_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, gep3_val5_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val13_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep3_val5_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val15_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val14_int, gep3_val5_int, switch13_val14_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep3_val5_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch13_val13_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block2);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep10_val10_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg0, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(1);
	Value* cmp13_var = builder.CreateICmp(CmpInst::ICMP_EQ, load12_var, cmp8_val8_int);
	builder.CreateCondBr(cmp13_var, block14, block2);
	
	builder.SetInsertPoint(block2);
	Constant* gep14_val14_int = ConstantInt::get(types[3], 15u);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load16_var = builder.CreateLoad(gep14_var, false);
	load16_var->setAlignment(4);
	SwitchInst* switch17_var = builder.CreateSwitch(load16_var, block12, 3);
	Constant* switch17_val17_int = ConstantInt::get(types[3], 2u);
	switch17_var->addCase(cast<ConstantInt>(switch17_val17_int), block3);
	Constant* switch17_val18_int = ConstantInt::get(types[3], 1u);
	switch17_var->addCase(cast<ConstantInt>(switch17_val18_int), block4);
	switch17_var->addCase(cast<ConstantInt>(gep10_val10_int), block5);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	Value* cast20_var = builder.CreateCast(Instruction::BitCast, gep19_var, types[24]);
	llvm::LoadInst* load21_var = builder.CreateLoad(cast20_var, false);
	load21_var->setAlignment(8);
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep22_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep3_val5_int, };
	Value* gep22_var = builder.CreateGEP(arg2, gep22_array);
	llvm::LoadInst* load23_var = builder.CreateLoad(gep22_var, false);
	load23_var->setAlignment(4);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load23_var);
	call24_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block5);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep3_val5_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep3_val5_int);
	builder.CreateCondBr(cmp28_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi30_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep31_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, switch17_val17_int, };
	Value* gep31_var = builder.CreateInBoundsGEP(arg2, gep31_array);
	llvm::LoadInst* load32_var = builder.CreateLoad(gep31_var, false);
	load32_var->setAlignment(4);
	Value* cmp33_var = builder.CreateICmp(CmpInst::ICMP_EQ, load32_var, gep3_val5_int);
	builder.CreateCondBr(cmp33_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call34_var = builder.CreateCall2(globals[1], arg0, load32_var);
	call34_var->setTailCall();
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, gep10_val10_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cast37_var = builder.CreateCast(Instruction::SExt, load36_var, types[7]);
	Value* binop38_var = BinaryOperator::Create(Instruction::Mul, cast37_var, call34_var, "", builder.GetInsertBlock());
	Value* binop39_var = BinaryOperator::Create(Instruction::Add, binop38_var, phi30_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi40_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep41_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val18_int, gep3_val5_int, switch17_val18_int, };
	Value* gep41_var = builder.CreateInBoundsGEP(arg2, gep41_array);
	llvm::LoadInst* load42_var = builder.CreateLoad(gep41_var, false);
	load42_var->setAlignment(4);
	Value* cmp43_var = builder.CreateICmp(CmpInst::ICMP_EQ, load42_var, gep3_val5_int);
	builder.CreateCondBr(cmp43_var, block11, block10);
	
	builder.SetInsertPoint(block10);
	CallInst* call44_var = builder.CreateCall2(globals[1], arg0, load42_var);
	call44_var->setTailCall();
	Value* binop45_var = BinaryOperator::Create(Instruction::Add, call44_var, phi40_var, "", builder.GetInsertBlock());
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block11);
	PHINode* phi46_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep47_array { gep3_val3_int, gep14_val14_int, gep3_val3_int, switch17_val17_int, };
	Value* gep47_var = builder.CreateInBoundsGEP(arg2, gep47_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep47_var, false);
	load48_var->setAlignment(1);
	Value* cast49_var = builder.CreateCast(Instruction::ZExt, load48_var, types[7]);
	CallInst* call50_var = builder.CreateCall2(globals[2], phi46_var, cast49_var);
	call50_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep53_array { gep3_val3_int, gep3_val3_int, };
	Value* gep53_var = builder.CreateInBoundsGEP(globals[5], gep53_array);
	CallInst* call52_var = builder.CreateCall(globals[3], gep53_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	PHINode* phi56_var = builder.CreatePHI(types[7], 3);
	CallInst* call57_var = builder.CreateCall3(globals[13], arg1, arg0, phi56_var);
	call57_var->setTailCall();
	call57_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block14);
	phi30_var->addIncoming(call29_var, block6);
	phi30_var->addIncoming(gep3_val3_int, block5);
	
	phi40_var->addIncoming(binop39_var, block8);
	phi40_var->addIncoming(phi30_var, block7);
	
	phi46_var->addIncoming(binop45_var, block10);
	phi46_var->addIncoming(phi40_var, block9);
	
	phi56_var->addIncoming(call50_var, block11);
	phi56_var->addIncoming(call24_var, block4);
	phi56_var->addIncoming(load21_var, block3);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jcxz(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* call3_val4_int = ConstantInt::get(types[3], 12u);
	CallInst* call3_var = builder.CreateCall2(globals[1], arg0, call3_val4_int);
	call3_var->setTailCall();
	Constant* cmp6_val6_int = ConstantInt::get(types[7], 0u);
	Value* cmp6_var = builder.CreateICmp(CmpInst::ICMP_EQ, call3_var, cmp6_val6_int);
	builder.CreateCondBr(cmp6_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep8_val8_int = ConstantInt::get(types[3], 15u);
	Constant* gep8_val9_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep8_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, gep8_val9_int, };
	Value* gep8_var = builder.CreateInBoundsGEP(arg2, gep8_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep8_var, false);
	load11_var->setAlignment(4);
	SwitchInst* switch12_var = builder.CreateSwitch(load11_var, block11, 3);
	Constant* switch12_val12_int = ConstantInt::get(types[3], 2u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val12_int), block2);
	Constant* switch12_val13_int = ConstantInt::get(types[3], 1u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val13_int), block3);
	Constant* switch12_val14_int = ConstantInt::get(types[3], 3u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val14_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep15_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, };
	Value* gep15_var = builder.CreateInBoundsGEP(arg2, gep15_array);
	Value* cast16_var = builder.CreateCast(Instruction::BitCast, gep15_var, types[24]);
	llvm::LoadInst* load17_var = builder.CreateLoad(cast16_var, false);
	load17_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep18_var = builder.CreateGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	CallInst* call20_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call20_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep21_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep21_var = builder.CreateInBoundsGEP(arg2, gep21_array);
	llvm::LoadInst* load22_var = builder.CreateLoad(gep21_var, false);
	load22_var->setAlignment(4);
	Value* cmp23_var = builder.CreateICmp(CmpInst::ICMP_EQ, load22_var, gep8_val9_int);
	builder.CreateCondBr(cmp23_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load22_var);
	call24_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi25_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep26_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val12_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep8_val9_int);
	builder.CreateCondBr(cmp28_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	ArrayRef<Value*> gep30_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val14_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cast32_var = builder.CreateCast(Instruction::SExt, load31_var, types[7]);
	Value* binop33_var = BinaryOperator::Create(Instruction::Mul, cast32_var, call29_var, "", builder.GetInsertBlock());
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, binop33_var, phi25_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val13_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(4);
	Value* cmp38_var = builder.CreateICmp(CmpInst::ICMP_EQ, load37_var, gep8_val9_int);
	builder.CreateCondBr(cmp38_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call39_var = builder.CreateCall2(globals[1], arg0, load37_var);
	call39_var->setTailCall();
	Value* binop40_var = BinaryOperator::Create(Instruction::Add, call39_var, phi35_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi41_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep42_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val12_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(arg2, gep42_array);
	llvm::LoadInst* load43_var = builder.CreateLoad(gep42_var, false);
	load43_var->setAlignment(1);
	Value* cast44_var = builder.CreateCast(Instruction::ZExt, load43_var, types[7]);
	CallInst* call45_var = builder.CreateCall2(globals[2], phi41_var, cast44_var);
	call45_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep48_array { cmp6_val6_int, cmp6_val6_int, };
	Value* gep48_var = builder.CreateInBoundsGEP(globals[5], gep48_array);
	CallInst* call47_var = builder.CreateCall(globals[3], gep48_var);
	call47_var->setTailCall();
	call47_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi51_var = builder.CreatePHI(types[7], 3);
	CallInst* call52_var = builder.CreateCall3(globals[13], arg1, arg0, phi51_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi25_var->addIncoming(call24_var, block5);
	phi25_var->addIncoming(cmp6_val6_int, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi25_var, block6);
	
	phi41_var->addIncoming(binop40_var, block9);
	phi41_var->addIncoming(phi35_var, block8);
	
	phi51_var->addIncoming(call45_var, block10);
	phi51_var->addIncoming(call20_var, block3);
	phi51_var->addIncoming(load17_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_je(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	switch14_var->addCase(cast<ConstantInt>(gep3_val5_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep10_val11_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep10_val11_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep3_val5_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep10_val11_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jecxz(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* call3_val4_int = ConstantInt::get(types[3], 22u);
	CallInst* call3_var = builder.CreateCall2(globals[1], arg0, call3_val4_int);
	call3_var->setTailCall();
	Constant* cmp6_val6_int = ConstantInt::get(types[7], 0u);
	Value* cmp6_var = builder.CreateICmp(CmpInst::ICMP_EQ, call3_var, cmp6_val6_int);
	builder.CreateCondBr(cmp6_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep8_val8_int = ConstantInt::get(types[3], 15u);
	Constant* gep8_val9_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep8_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, gep8_val9_int, };
	Value* gep8_var = builder.CreateInBoundsGEP(arg2, gep8_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep8_var, false);
	load11_var->setAlignment(4);
	SwitchInst* switch12_var = builder.CreateSwitch(load11_var, block11, 3);
	Constant* switch12_val12_int = ConstantInt::get(types[3], 2u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val12_int), block2);
	Constant* switch12_val13_int = ConstantInt::get(types[3], 1u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val13_int), block3);
	Constant* switch12_val14_int = ConstantInt::get(types[3], 3u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val14_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep15_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, };
	Value* gep15_var = builder.CreateInBoundsGEP(arg2, gep15_array);
	Value* cast16_var = builder.CreateCast(Instruction::BitCast, gep15_var, types[24]);
	llvm::LoadInst* load17_var = builder.CreateLoad(cast16_var, false);
	load17_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep18_var = builder.CreateGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	CallInst* call20_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call20_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep21_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep21_var = builder.CreateInBoundsGEP(arg2, gep21_array);
	llvm::LoadInst* load22_var = builder.CreateLoad(gep21_var, false);
	load22_var->setAlignment(4);
	Value* cmp23_var = builder.CreateICmp(CmpInst::ICMP_EQ, load22_var, gep8_val9_int);
	builder.CreateCondBr(cmp23_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load22_var);
	call24_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi25_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep26_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val12_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep8_val9_int);
	builder.CreateCondBr(cmp28_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	ArrayRef<Value*> gep30_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val14_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cast32_var = builder.CreateCast(Instruction::SExt, load31_var, types[7]);
	Value* binop33_var = BinaryOperator::Create(Instruction::Mul, cast32_var, call29_var, "", builder.GetInsertBlock());
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, binop33_var, phi25_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val13_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(4);
	Value* cmp38_var = builder.CreateICmp(CmpInst::ICMP_EQ, load37_var, gep8_val9_int);
	builder.CreateCondBr(cmp38_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call39_var = builder.CreateCall2(globals[1], arg0, load37_var);
	call39_var->setTailCall();
	Value* binop40_var = BinaryOperator::Create(Instruction::Add, call39_var, phi35_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi41_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep42_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val12_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(arg2, gep42_array);
	llvm::LoadInst* load43_var = builder.CreateLoad(gep42_var, false);
	load43_var->setAlignment(1);
	Value* cast44_var = builder.CreateCast(Instruction::ZExt, load43_var, types[7]);
	CallInst* call45_var = builder.CreateCall2(globals[2], phi41_var, cast44_var);
	call45_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep48_array { cmp6_val6_int, cmp6_val6_int, };
	Value* gep48_var = builder.CreateInBoundsGEP(globals[5], gep48_array);
	CallInst* call47_var = builder.CreateCall(globals[3], gep48_var);
	call47_var->setTailCall();
	call47_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi51_var = builder.CreatePHI(types[7], 3);
	CallInst* call52_var = builder.CreateCall3(globals[13], arg1, arg0, phi51_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi25_var->addIncoming(call24_var, block5);
	phi25_var->addIncoming(cmp6_val6_int, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi25_var, block6);
	
	phi41_var->addIncoming(binop40_var, block9);
	phi41_var->addIncoming(phi35_var, block8);
	
	phi51_var->addIncoming(call45_var, block10);
	phi51_var->addIncoming(call20_var, block3);
	phi51_var->addIncoming(load17_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block14);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep10_val10_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg0, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(1);
	Constant* gep13_val13_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep13_array { gep3_val3_int, gep3_val4_int, gep13_val13_int, };
	Value* gep13_var = builder.CreateInBoundsGEP(arg0, gep13_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep13_var, false);
	load15_var->setAlignment(1);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load12_var, load15_var);
	builder.CreateCondBr(cmp16_var, block2, block14);
	
	builder.SetInsertPoint(block2);
	Constant* gep17_val17_int = ConstantInt::get(types[3], 15u);
	Constant* gep17_val18_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, gep17_val18_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep17_var, false);
	load20_var->setAlignment(4);
	SwitchInst* switch21_var = builder.CreateSwitch(load20_var, block12, 3);
	Constant* switch21_val21_int = ConstantInt::get(types[3], 2u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val21_int), block3);
	Constant* switch21_val22_int = ConstantInt::get(types[3], 1u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val22_int), block4);
	switch21_var->addCase(cast<ConstantInt>(gep3_val5_int), block5);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	Value* cast24_var = builder.CreateCast(Instruction::BitCast, gep23_var, types[24]);
	llvm::LoadInst* load25_var = builder.CreateLoad(cast24_var, false);
	load25_var->setAlignment(8);
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep17_val18_int, };
	Value* gep26_var = builder.CreateGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	CallInst* call28_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call28_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block5);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep17_val18_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep17_val18_int);
	builder.CreateCondBr(cmp32_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi34_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, switch21_val21_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cmp37_var = builder.CreateICmp(CmpInst::ICMP_EQ, load36_var, gep17_val18_int);
	builder.CreateCondBr(cmp37_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call38_var = builder.CreateCall2(globals[1], arg0, load36_var);
	call38_var->setTailCall();
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep3_val5_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cast41_var = builder.CreateCast(Instruction::SExt, load40_var, types[7]);
	Value* binop42_var = BinaryOperator::Create(Instruction::Mul, cast41_var, call38_var, "", builder.GetInsertBlock());
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, binop42_var, phi34_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, switch21_val22_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(4);
	Value* cmp47_var = builder.CreateICmp(CmpInst::ICMP_EQ, load46_var, gep17_val18_int);
	builder.CreateCondBr(cmp47_var, block11, block10);
	
	builder.SetInsertPoint(block10);
	CallInst* call48_var = builder.CreateCall2(globals[1], arg0, load46_var);
	call48_var->setTailCall();
	Value* binop49_var = BinaryOperator::Create(Instruction::Add, call48_var, phi44_var, "", builder.GetInsertBlock());
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block11);
	PHINode* phi50_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val21_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(arg2, gep51_array);
	llvm::LoadInst* load52_var = builder.CreateLoad(gep51_var, false);
	load52_var->setAlignment(1);
	Value* cast53_var = builder.CreateCast(Instruction::ZExt, load52_var, types[7]);
	CallInst* call54_var = builder.CreateCall2(globals[2], phi50_var, cast53_var);
	call54_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep57_array { gep3_val3_int, gep3_val3_int, };
	Value* gep57_var = builder.CreateInBoundsGEP(globals[5], gep57_array);
	CallInst* call56_var = builder.CreateCall(globals[3], gep57_var);
	call56_var->setTailCall();
	call56_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	PHINode* phi60_var = builder.CreatePHI(types[7], 3);
	CallInst* call61_var = builder.CreateCall3(globals[13], arg1, arg0, phi60_var);
	call61_var->setTailCall();
	call61_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block14);
	phi34_var->addIncoming(call33_var, block6);
	phi34_var->addIncoming(gep3_val3_int, block5);
	
	phi44_var->addIncoming(binop43_var, block8);
	phi44_var->addIncoming(phi34_var, block7);
	
	phi50_var->addIncoming(binop49_var, block10);
	phi50_var->addIncoming(phi44_var, block9);
	
	phi60_var->addIncoming(call54_var, block11);
	phi60_var->addIncoming(call28_var, block4);
	phi60_var->addIncoming(load25_var, block3);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jge(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* gep8_val8_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep8_array { gep3_val3_int, gep3_val4_int, gep8_val8_int, };
	Value* gep8_var = builder.CreateInBoundsGEP(arg0, gep8_array);
	llvm::LoadInst* load10_var = builder.CreateLoad(gep8_var, false);
	load10_var->setAlignment(1);
	Value* cmp11_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, load10_var);
	builder.CreateCondBr(cmp11_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep12_val12_int = ConstantInt::get(types[3], 15u);
	Constant* gep12_val13_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep12_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, gep12_val13_int, };
	Value* gep12_var = builder.CreateInBoundsGEP(arg2, gep12_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep12_var, false);
	load15_var->setAlignment(4);
	SwitchInst* switch16_var = builder.CreateSwitch(load15_var, block11, 3);
	Constant* switch16_val16_int = ConstantInt::get(types[3], 2u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val16_int), block2);
	Constant* switch16_val17_int = ConstantInt::get(types[3], 1u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val17_int), block3);
	Constant* switch16_val18_int = ConstantInt::get(types[3], 3u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val18_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	Value* cast20_var = builder.CreateCast(Instruction::BitCast, gep19_var, types[24]);
	llvm::LoadInst* load21_var = builder.CreateLoad(cast20_var, false);
	load21_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep22_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, gep12_val13_int, };
	Value* gep22_var = builder.CreateGEP(arg2, gep22_array);
	llvm::LoadInst* load23_var = builder.CreateLoad(gep22_var, false);
	load23_var->setAlignment(4);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load23_var);
	call24_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, gep12_val13_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep12_val13_int);
	builder.CreateCondBr(cmp28_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi30_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep31_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val16_int, };
	Value* gep31_var = builder.CreateInBoundsGEP(arg2, gep31_array);
	llvm::LoadInst* load32_var = builder.CreateLoad(gep31_var, false);
	load32_var->setAlignment(4);
	Value* cmp33_var = builder.CreateICmp(CmpInst::ICMP_EQ, load32_var, gep12_val13_int);
	builder.CreateCondBr(cmp33_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call34_var = builder.CreateCall2(globals[1], arg0, load32_var);
	call34_var->setTailCall();
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val18_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cast37_var = builder.CreateCast(Instruction::SExt, load36_var, types[7]);
	Value* binop38_var = BinaryOperator::Create(Instruction::Mul, cast37_var, call34_var, "", builder.GetInsertBlock());
	Value* binop39_var = BinaryOperator::Create(Instruction::Add, binop38_var, phi30_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi40_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep41_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val17_int, };
	Value* gep41_var = builder.CreateInBoundsGEP(arg2, gep41_array);
	llvm::LoadInst* load42_var = builder.CreateLoad(gep41_var, false);
	load42_var->setAlignment(4);
	Value* cmp43_var = builder.CreateICmp(CmpInst::ICMP_EQ, load42_var, gep12_val13_int);
	builder.CreateCondBr(cmp43_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call44_var = builder.CreateCall2(globals[1], arg0, load42_var);
	call44_var->setTailCall();
	Value* binop45_var = BinaryOperator::Create(Instruction::Add, call44_var, phi40_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi46_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep47_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val16_int, };
	Value* gep47_var = builder.CreateInBoundsGEP(arg2, gep47_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep47_var, false);
	load48_var->setAlignment(1);
	Value* cast49_var = builder.CreateCast(Instruction::ZExt, load48_var, types[7]);
	CallInst* call50_var = builder.CreateCall2(globals[2], phi46_var, cast49_var);
	call50_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep53_array { gep3_val3_int, gep3_val3_int, };
	Value* gep53_var = builder.CreateInBoundsGEP(globals[5], gep53_array);
	CallInst* call52_var = builder.CreateCall(globals[3], gep53_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi56_var = builder.CreatePHI(types[7], 3);
	CallInst* call57_var = builder.CreateCall3(globals[13], arg1, arg0, phi56_var);
	call57_var->setTailCall();
	call57_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi30_var->addIncoming(call29_var, block5);
	phi30_var->addIncoming(gep3_val3_int, block4);
	
	phi40_var->addIncoming(binop39_var, block7);
	phi40_var->addIncoming(phi30_var, block6);
	
	phi46_var->addIncoming(binop45_var, block9);
	phi46_var->addIncoming(phi40_var, block8);
	
	phi56_var->addIncoming(call50_var, block10);
	phi56_var->addIncoming(call24_var, block3);
	phi56_var->addIncoming(load21_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* gep8_val8_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep8_array { gep3_val3_int, gep3_val4_int, gep8_val8_int, };
	Value* gep8_var = builder.CreateInBoundsGEP(arg0, gep8_array);
	llvm::LoadInst* load10_var = builder.CreateLoad(gep8_var, false);
	load10_var->setAlignment(1);
	Value* cmp11_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, load10_var);
	builder.CreateCondBr(cmp11_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep12_val12_int = ConstantInt::get(types[3], 15u);
	Constant* gep12_val13_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep12_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, gep12_val13_int, };
	Value* gep12_var = builder.CreateInBoundsGEP(arg2, gep12_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep12_var, false);
	load15_var->setAlignment(4);
	SwitchInst* switch16_var = builder.CreateSwitch(load15_var, block11, 3);
	Constant* switch16_val16_int = ConstantInt::get(types[3], 2u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val16_int), block2);
	Constant* switch16_val17_int = ConstantInt::get(types[3], 1u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val17_int), block3);
	Constant* switch16_val18_int = ConstantInt::get(types[3], 3u);
	switch16_var->addCase(cast<ConstantInt>(switch16_val18_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	Value* cast20_var = builder.CreateCast(Instruction::BitCast, gep19_var, types[24]);
	llvm::LoadInst* load21_var = builder.CreateLoad(cast20_var, false);
	load21_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep22_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, gep12_val13_int, };
	Value* gep22_var = builder.CreateGEP(arg2, gep22_array);
	llvm::LoadInst* load23_var = builder.CreateLoad(gep22_var, false);
	load23_var->setAlignment(4);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load23_var);
	call24_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, gep12_val13_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep12_val13_int);
	builder.CreateCondBr(cmp28_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi30_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep31_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val16_int, };
	Value* gep31_var = builder.CreateInBoundsGEP(arg2, gep31_array);
	llvm::LoadInst* load32_var = builder.CreateLoad(gep31_var, false);
	load32_var->setAlignment(4);
	Value* cmp33_var = builder.CreateICmp(CmpInst::ICMP_EQ, load32_var, gep12_val13_int);
	builder.CreateCondBr(cmp33_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call34_var = builder.CreateCall2(globals[1], arg0, load32_var);
	call34_var->setTailCall();
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val18_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cast37_var = builder.CreateCast(Instruction::SExt, load36_var, types[7]);
	Value* binop38_var = BinaryOperator::Create(Instruction::Mul, cast37_var, call34_var, "", builder.GetInsertBlock());
	Value* binop39_var = BinaryOperator::Create(Instruction::Add, binop38_var, phi30_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi40_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep41_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val17_int, gep12_val13_int, switch16_val17_int, };
	Value* gep41_var = builder.CreateInBoundsGEP(arg2, gep41_array);
	llvm::LoadInst* load42_var = builder.CreateLoad(gep41_var, false);
	load42_var->setAlignment(4);
	Value* cmp43_var = builder.CreateICmp(CmpInst::ICMP_EQ, load42_var, gep12_val13_int);
	builder.CreateCondBr(cmp43_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call44_var = builder.CreateCall2(globals[1], arg0, load42_var);
	call44_var->setTailCall();
	Value* binop45_var = BinaryOperator::Create(Instruction::Add, call44_var, phi40_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi46_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep47_array { gep3_val3_int, gep12_val12_int, gep3_val3_int, switch16_val16_int, };
	Value* gep47_var = builder.CreateInBoundsGEP(arg2, gep47_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep47_var, false);
	load48_var->setAlignment(1);
	Value* cast49_var = builder.CreateCast(Instruction::ZExt, load48_var, types[7]);
	CallInst* call50_var = builder.CreateCall2(globals[2], phi46_var, cast49_var);
	call50_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep53_array { gep3_val3_int, gep3_val3_int, };
	Value* gep53_var = builder.CreateInBoundsGEP(globals[5], gep53_array);
	CallInst* call52_var = builder.CreateCall(globals[3], gep53_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi56_var = builder.CreatePHI(types[7], 3);
	CallInst* call57_var = builder.CreateCall3(globals[13], arg1, arg0, phi56_var);
	call57_var->setTailCall();
	call57_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi30_var->addIncoming(call29_var, block5);
	phi30_var->addIncoming(gep3_val3_int, block4);
	
	phi40_var->addIncoming(binop39_var, block7);
	phi40_var->addIncoming(phi30_var, block6);
	
	phi46_var->addIncoming(binop45_var, block9);
	phi46_var->addIncoming(phi40_var, block8);
	
	phi56_var->addIncoming(call50_var, block10);
	phi56_var->addIncoming(call24_var, block3);
	phi56_var->addIncoming(load21_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jle(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block2);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep10_val10_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg0, gep10_array);
	llvm::LoadInst* load12_var = builder.CreateLoad(gep10_var, false);
	load12_var->setAlignment(1);
	Constant* gep13_val13_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep13_array { gep3_val3_int, gep3_val4_int, gep13_val13_int, };
	Value* gep13_var = builder.CreateInBoundsGEP(arg0, gep13_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep13_var, false);
	load15_var->setAlignment(1);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load12_var, load15_var);
	builder.CreateCondBr(cmp16_var, block14, block2);
	
	builder.SetInsertPoint(block2);
	Constant* gep17_val17_int = ConstantInt::get(types[3], 15u);
	Constant* gep17_val18_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, gep17_val18_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep17_var, false);
	load20_var->setAlignment(4);
	SwitchInst* switch21_var = builder.CreateSwitch(load20_var, block12, 3);
	Constant* switch21_val21_int = ConstantInt::get(types[3], 2u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val21_int), block3);
	Constant* switch21_val22_int = ConstantInt::get(types[3], 1u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val22_int), block4);
	switch21_var->addCase(cast<ConstantInt>(gep3_val5_int), block5);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	Value* cast24_var = builder.CreateCast(Instruction::BitCast, gep23_var, types[24]);
	llvm::LoadInst* load25_var = builder.CreateLoad(cast24_var, false);
	load25_var->setAlignment(8);
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep17_val18_int, };
	Value* gep26_var = builder.CreateGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	CallInst* call28_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call28_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block5);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep17_val18_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep17_val18_int);
	builder.CreateCondBr(cmp32_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi34_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, switch21_val21_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cmp37_var = builder.CreateICmp(CmpInst::ICMP_EQ, load36_var, gep17_val18_int);
	builder.CreateCondBr(cmp37_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call38_var = builder.CreateCall2(globals[1], arg0, load36_var);
	call38_var->setTailCall();
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, gep3_val5_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cast41_var = builder.CreateCast(Instruction::SExt, load40_var, types[7]);
	Value* binop42_var = BinaryOperator::Create(Instruction::Mul, cast41_var, call38_var, "", builder.GetInsertBlock());
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, binop42_var, phi34_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val22_int, gep17_val18_int, switch21_val22_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(4);
	Value* cmp47_var = builder.CreateICmp(CmpInst::ICMP_EQ, load46_var, gep17_val18_int);
	builder.CreateCondBr(cmp47_var, block11, block10);
	
	builder.SetInsertPoint(block10);
	CallInst* call48_var = builder.CreateCall2(globals[1], arg0, load46_var);
	call48_var->setTailCall();
	Value* binop49_var = BinaryOperator::Create(Instruction::Add, call48_var, phi44_var, "", builder.GetInsertBlock());
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block11);
	PHINode* phi50_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep17_val17_int, gep3_val3_int, switch21_val21_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(arg2, gep51_array);
	llvm::LoadInst* load52_var = builder.CreateLoad(gep51_var, false);
	load52_var->setAlignment(1);
	Value* cast53_var = builder.CreateCast(Instruction::ZExt, load52_var, types[7]);
	CallInst* call54_var = builder.CreateCall2(globals[2], phi50_var, cast53_var);
	call54_var->setTailCall();
	builder.CreateBr(block13);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep57_array { gep3_val3_int, gep3_val3_int, };
	Value* gep57_var = builder.CreateInBoundsGEP(globals[5], gep57_array);
	CallInst* call56_var = builder.CreateCall(globals[3], gep57_var);
	call56_var->setTailCall();
	call56_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	PHINode* phi60_var = builder.CreatePHI(types[7], 3);
	CallInst* call61_var = builder.CreateCall3(globals[13], arg1, arg0, phi60_var);
	call61_var->setTailCall();
	call61_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block14);
	phi34_var->addIncoming(call33_var, block6);
	phi34_var->addIncoming(gep3_val3_int, block5);
	
	phi44_var->addIncoming(binop43_var, block8);
	phi44_var->addIncoming(phi34_var, block7);
	
	phi50_var->addIncoming(binop49_var, block10);
	phi50_var->addIncoming(phi44_var, block9);
	
	phi60_var->addIncoming(call54_var, block11);
	phi60_var->addIncoming(call28_var, block4);
	phi60_var->addIncoming(load25_var, block3);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jmp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block10, 3);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 2u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	Constant* switch8_val10_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val10_int), block3);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep11_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, };
	Value* gep11_var = builder.CreateInBoundsGEP(arg2, gep11_array);
	Value* cast12_var = builder.CreateCast(Instruction::BitCast, gep11_var, types[24]);
	llvm::LoadInst* load13_var = builder.CreateLoad(cast12_var, false);
	load13_var->setAlignment(8);
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	CallInst* call16_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call16_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep18_var = builder.CreateInBoundsGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	Value* cmp20_var = builder.CreateICmp(CmpInst::ICMP_EQ, load19_var, gep3_val5_int);
	builder.CreateCondBr(cmp20_var, block5, block4);
	
	builder.SetInsertPoint(block4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call21_var->setTailCall();
	builder.CreateBr(block5);
	
	builder.SetInsertPoint(block5);
	PHINode* phi22_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val8_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	ArrayRef<Value*> gep27_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val10_int, };
	Value* gep27_var = builder.CreateInBoundsGEP(arg2, gep27_array);
	llvm::LoadInst* load28_var = builder.CreateLoad(gep27_var, false);
	load28_var->setAlignment(4);
	Value* cast29_var = builder.CreateCast(Instruction::SExt, load28_var, types[7]);
	Value* binop30_var = BinaryOperator::Create(Instruction::Mul, cast29_var, call26_var, "", builder.GetInsertBlock());
	Value* binop31_var = BinaryOperator::Create(Instruction::Add, binop30_var, phi22_var, "", builder.GetInsertBlock());
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi32_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val9_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cmp35_var = builder.CreateICmp(CmpInst::ICMP_EQ, load34_var, gep3_val5_int);
	builder.CreateCondBr(cmp35_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call36_var = builder.CreateCall2(globals[1], arg0, load34_var);
	call36_var->setTailCall();
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, call36_var, phi32_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(1);
	Value* cast41_var = builder.CreateCast(Instruction::ZExt, load40_var, types[7]);
	CallInst* call42_var = builder.CreateCall2(globals[2], phi38_var, cast41_var);
	call42_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block10);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep3_val3_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(globals[5], gep45_array);
	CallInst* call44_var = builder.CreateCall(globals[3], gep45_var);
	call44_var->setTailCall();
	call44_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block11);
	PHINode* phi48_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep49_array { gep3_val3_int, switch8_val9_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg1, gep49_array);
	llvm::LoadInst* load50_var = builder.CreateLoad(gep49_var, false);
	load50_var->setAlignment(4);
	CallInst* call51_var = builder.CreateCall3(globals[9], arg0, load50_var, phi48_var);
	call51_var->setTailCall();
	phi22_var->addIncoming(call21_var, block4);
	phi22_var->addIncoming(gep3_val3_int, block3);
	
	phi32_var->addIncoming(binop31_var, block6);
	phi32_var->addIncoming(phi22_var, block5);
	
	phi38_var->addIncoming(binop37_var, block8);
	phi38_var->addIncoming(phi32_var, block7);
	
	phi48_var->addIncoming(call42_var, block9);
	phi48_var->addIncoming(call16_var, block2);
	phi48_var->addIncoming(load13_var, block1);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jne(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	switch14_var->addCase(cast<ConstantInt>(gep3_val5_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep10_val11_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep10_val11_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep3_val5_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep10_val11_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jno(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	Constant* switch14_val16_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val16_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	Value* cast18_var = builder.CreateCast(Instruction::BitCast, gep17_var, types[24]);
	llvm::LoadInst* load19_var = builder.CreateLoad(cast18_var, false);
	load19_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep20_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep20_var = builder.CreateGEP(arg2, gep20_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep20_var, false);
	load21_var->setAlignment(4);
	CallInst* call22_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call22_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cmp26_var = builder.CreateICmp(CmpInst::ICMP_EQ, load25_var, gep10_val11_int);
	builder.CreateCondBr(cmp26_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call27_var = builder.CreateCall2(globals[1], arg0, load25_var);
	call27_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi28_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep29_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep29_var = builder.CreateInBoundsGEP(arg2, gep29_array);
	llvm::LoadInst* load30_var = builder.CreateLoad(gep29_var, false);
	load30_var->setAlignment(4);
	Value* cmp31_var = builder.CreateICmp(CmpInst::ICMP_EQ, load30_var, gep10_val11_int);
	builder.CreateCondBr(cmp31_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call32_var = builder.CreateCall2(globals[1], arg0, load30_var);
	call32_var->setTailCall();
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val16_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cast35_var = builder.CreateCast(Instruction::SExt, load34_var, types[7]);
	Value* binop36_var = BinaryOperator::Create(Instruction::Mul, cast35_var, call32_var, "", builder.GetInsertBlock());
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, binop36_var, phi28_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cmp41_var = builder.CreateICmp(CmpInst::ICMP_EQ, load40_var, gep10_val11_int);
	builder.CreateCondBr(cmp41_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call42_var = builder.CreateCall2(globals[1], arg0, load40_var);
	call42_var->setTailCall();
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, call42_var, phi38_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(1);
	Value* cast47_var = builder.CreateCast(Instruction::ZExt, load46_var, types[7]);
	CallInst* call48_var = builder.CreateCall2(globals[2], phi44_var, cast47_var);
	call48_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep3_val3_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(globals[5], gep51_array);
	CallInst* call50_var = builder.CreateCall(globals[3], gep51_var);
	call50_var->setTailCall();
	call50_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi54_var = builder.CreatePHI(types[7], 3);
	CallInst* call55_var = builder.CreateCall3(globals[13], arg1, arg0, phi54_var);
	call55_var->setTailCall();
	call55_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi28_var->addIncoming(call27_var, block5);
	phi28_var->addIncoming(gep3_val3_int, block4);
	
	phi38_var->addIncoming(binop37_var, block7);
	phi38_var->addIncoming(phi28_var, block6);
	
	phi44_var->addIncoming(binop43_var, block9);
	phi44_var->addIncoming(phi38_var, block8);
	
	phi54_var->addIncoming(call48_var, block10);
	phi54_var->addIncoming(call22_var, block3);
	phi54_var->addIncoming(load19_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jnp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 1u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	switch14_var->addCase(cast<ConstantInt>(gep3_val5_int), block3);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep10_val11_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep10_val11_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep10_val11_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, switch14_val14_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep10_val11_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, switch14_val15_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep3_val5_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep10_val11_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jns(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	Constant* switch14_val16_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val16_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	Value* cast18_var = builder.CreateCast(Instruction::BitCast, gep17_var, types[24]);
	llvm::LoadInst* load19_var = builder.CreateLoad(cast18_var, false);
	load19_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep20_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep20_var = builder.CreateGEP(arg2, gep20_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep20_var, false);
	load21_var->setAlignment(4);
	CallInst* call22_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call22_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cmp26_var = builder.CreateICmp(CmpInst::ICMP_EQ, load25_var, gep10_val11_int);
	builder.CreateCondBr(cmp26_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call27_var = builder.CreateCall2(globals[1], arg0, load25_var);
	call27_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi28_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep29_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep29_var = builder.CreateInBoundsGEP(arg2, gep29_array);
	llvm::LoadInst* load30_var = builder.CreateLoad(gep29_var, false);
	load30_var->setAlignment(4);
	Value* cmp31_var = builder.CreateICmp(CmpInst::ICMP_EQ, load30_var, gep10_val11_int);
	builder.CreateCondBr(cmp31_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call32_var = builder.CreateCall2(globals[1], arg0, load30_var);
	call32_var->setTailCall();
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val16_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cast35_var = builder.CreateCast(Instruction::SExt, load34_var, types[7]);
	Value* binop36_var = BinaryOperator::Create(Instruction::Mul, cast35_var, call32_var, "", builder.GetInsertBlock());
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, binop36_var, phi28_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cmp41_var = builder.CreateICmp(CmpInst::ICMP_EQ, load40_var, gep10_val11_int);
	builder.CreateCondBr(cmp41_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call42_var = builder.CreateCall2(globals[1], arg0, load40_var);
	call42_var->setTailCall();
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, call42_var, phi38_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(1);
	Value* cast47_var = builder.CreateCast(Instruction::ZExt, load46_var, types[7]);
	CallInst* call48_var = builder.CreateCall2(globals[2], phi44_var, cast47_var);
	call48_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep3_val3_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(globals[5], gep51_array);
	CallInst* call50_var = builder.CreateCall(globals[3], gep51_var);
	call50_var->setTailCall();
	call50_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi54_var = builder.CreatePHI(types[7], 3);
	CallInst* call55_var = builder.CreateCall3(globals[13], arg1, arg0, phi54_var);
	call55_var->setTailCall();
	call55_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi28_var->addIncoming(call27_var, block5);
	phi28_var->addIncoming(gep3_val3_int, block4);
	
	phi38_var->addIncoming(binop37_var, block7);
	phi38_var->addIncoming(phi28_var, block6);
	
	phi44_var->addIncoming(binop43_var, block9);
	phi44_var->addIncoming(phi38_var, block8);
	
	phi54_var->addIncoming(call48_var, block10);
	phi54_var->addIncoming(call22_var, block3);
	phi54_var->addIncoming(load19_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jo(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	Constant* switch14_val16_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val16_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	Value* cast18_var = builder.CreateCast(Instruction::BitCast, gep17_var, types[24]);
	llvm::LoadInst* load19_var = builder.CreateLoad(cast18_var, false);
	load19_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep20_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep20_var = builder.CreateGEP(arg2, gep20_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep20_var, false);
	load21_var->setAlignment(4);
	CallInst* call22_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call22_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cmp26_var = builder.CreateICmp(CmpInst::ICMP_EQ, load25_var, gep10_val11_int);
	builder.CreateCondBr(cmp26_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call27_var = builder.CreateCall2(globals[1], arg0, load25_var);
	call27_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi28_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep29_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep29_var = builder.CreateInBoundsGEP(arg2, gep29_array);
	llvm::LoadInst* load30_var = builder.CreateLoad(gep29_var, false);
	load30_var->setAlignment(4);
	Value* cmp31_var = builder.CreateICmp(CmpInst::ICMP_EQ, load30_var, gep10_val11_int);
	builder.CreateCondBr(cmp31_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call32_var = builder.CreateCall2(globals[1], arg0, load30_var);
	call32_var->setTailCall();
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val16_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cast35_var = builder.CreateCast(Instruction::SExt, load34_var, types[7]);
	Value* binop36_var = BinaryOperator::Create(Instruction::Mul, cast35_var, call32_var, "", builder.GetInsertBlock());
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, binop36_var, phi28_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cmp41_var = builder.CreateICmp(CmpInst::ICMP_EQ, load40_var, gep10_val11_int);
	builder.CreateCondBr(cmp41_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call42_var = builder.CreateCall2(globals[1], arg0, load40_var);
	call42_var->setTailCall();
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, call42_var, phi38_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(1);
	Value* cast47_var = builder.CreateCast(Instruction::ZExt, load46_var, types[7]);
	CallInst* call48_var = builder.CreateCall2(globals[2], phi44_var, cast47_var);
	call48_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep3_val3_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(globals[5], gep51_array);
	CallInst* call50_var = builder.CreateCall(globals[3], gep51_var);
	call50_var->setTailCall();
	call50_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi54_var = builder.CreatePHI(types[7], 3);
	CallInst* call55_var = builder.CreateCall3(globals[13], arg1, arg0, phi54_var);
	call55_var->setTailCall();
	call55_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi28_var->addIncoming(call27_var, block5);
	phi28_var->addIncoming(gep3_val3_int, block4);
	
	phi38_var->addIncoming(binop37_var, block7);
	phi38_var->addIncoming(phi28_var, block6);
	
	phi44_var->addIncoming(binop43_var, block9);
	phi44_var->addIncoming(phi38_var, block8);
	
	phi54_var->addIncoming(call48_var, block10);
	phi54_var->addIncoming(call22_var, block3);
	phi54_var->addIncoming(load19_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 1u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	switch14_var->addCase(cast<ConstantInt>(gep3_val5_int), block3);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep16_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, };
	Value* gep16_var = builder.CreateInBoundsGEP(arg2, gep16_array);
	Value* cast17_var = builder.CreateCast(Instruction::BitCast, gep16_var, types[24]);
	llvm::LoadInst* load18_var = builder.CreateLoad(cast17_var, false);
	load18_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep10_val11_int, };
	Value* gep19_var = builder.CreateGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call21_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep10_val11_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep10_val11_int);
	builder.CreateCondBr(cmp25_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi27_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, switch14_val14_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cmp30_var = builder.CreateICmp(CmpInst::ICMP_EQ, load29_var, gep10_val11_int);
	builder.CreateCondBr(cmp30_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call31_var = builder.CreateCall2(globals[1], arg0, load29_var);
	call31_var->setTailCall();
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, switch14_val15_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	Value* cast34_var = builder.CreateCast(Instruction::SExt, load33_var, types[7]);
	Value* binop35_var = BinaryOperator::Create(Instruction::Mul, cast34_var, call31_var, "", builder.GetInsertBlock());
	Value* binop36_var = BinaryOperator::Create(Instruction::Add, binop35_var, phi27_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi37_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep3_val5_int, gep10_val11_int, gep3_val5_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep10_val11_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	Value* binop42_var = BinaryOperator::Create(Instruction::Add, call41_var, phi37_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi43_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep44_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep44_var = builder.CreateInBoundsGEP(arg2, gep44_array);
	llvm::LoadInst* load45_var = builder.CreateLoad(gep44_var, false);
	load45_var->setAlignment(1);
	Value* cast46_var = builder.CreateCast(Instruction::ZExt, load45_var, types[7]);
	CallInst* call47_var = builder.CreateCall2(globals[2], phi43_var, cast46_var);
	call47_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[5], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi53_var = builder.CreatePHI(types[7], 3);
	CallInst* call54_var = builder.CreateCall3(globals[13], arg1, arg0, phi53_var);
	call54_var->setTailCall();
	call54_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi27_var->addIncoming(call26_var, block5);
	phi27_var->addIncoming(gep3_val3_int, block4);
	
	phi37_var->addIncoming(binop36_var, block7);
	phi37_var->addIncoming(phi27_var, block6);
	
	phi43_var->addIncoming(binop42_var, block9);
	phi43_var->addIncoming(phi37_var, block8);
	
	phi53_var->addIncoming(call47_var, block10);
	phi53_var->addIncoming(call21_var, block3);
	phi53_var->addIncoming(load18_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_jrcxz(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* call3_val4_int = ConstantInt::get(types[3], 38u);
	CallInst* call3_var = builder.CreateCall2(globals[1], arg0, call3_val4_int);
	call3_var->setTailCall();
	Constant* cmp6_val6_int = ConstantInt::get(types[7], 0u);
	Value* cmp6_var = builder.CreateICmp(CmpInst::ICMP_EQ, call3_var, cmp6_val6_int);
	builder.CreateCondBr(cmp6_var, block1, block13);
	
	builder.SetInsertPoint(block1);
	Constant* gep8_val8_int = ConstantInt::get(types[3], 15u);
	Constant* gep8_val9_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep8_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, gep8_val9_int, };
	Value* gep8_var = builder.CreateInBoundsGEP(arg2, gep8_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep8_var, false);
	load11_var->setAlignment(4);
	SwitchInst* switch12_var = builder.CreateSwitch(load11_var, block11, 3);
	Constant* switch12_val12_int = ConstantInt::get(types[3], 2u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val12_int), block2);
	Constant* switch12_val13_int = ConstantInt::get(types[3], 1u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val13_int), block3);
	Constant* switch12_val14_int = ConstantInt::get(types[3], 3u);
	switch12_var->addCase(cast<ConstantInt>(switch12_val14_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep15_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, };
	Value* gep15_var = builder.CreateInBoundsGEP(arg2, gep15_array);
	Value* cast16_var = builder.CreateCast(Instruction::BitCast, gep15_var, types[24]);
	llvm::LoadInst* load17_var = builder.CreateLoad(cast16_var, false);
	load17_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep18_var = builder.CreateGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	CallInst* call20_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call20_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep21_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, gep8_val9_int, };
	Value* gep21_var = builder.CreateInBoundsGEP(arg2, gep21_array);
	llvm::LoadInst* load22_var = builder.CreateLoad(gep21_var, false);
	load22_var->setAlignment(4);
	Value* cmp23_var = builder.CreateICmp(CmpInst::ICMP_EQ, load22_var, gep8_val9_int);
	builder.CreateCondBr(cmp23_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call24_var = builder.CreateCall2(globals[1], arg0, load22_var);
	call24_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi25_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep26_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val12_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep8_val9_int);
	builder.CreateCondBr(cmp28_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	ArrayRef<Value*> gep30_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val14_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cast32_var = builder.CreateCast(Instruction::SExt, load31_var, types[7]);
	Value* binop33_var = BinaryOperator::Create(Instruction::Mul, cast32_var, call29_var, "", builder.GetInsertBlock());
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, binop33_var, phi25_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val13_int, gep8_val9_int, switch12_val13_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(4);
	Value* cmp38_var = builder.CreateICmp(CmpInst::ICMP_EQ, load37_var, gep8_val9_int);
	builder.CreateCondBr(cmp38_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call39_var = builder.CreateCall2(globals[1], arg0, load37_var);
	call39_var->setTailCall();
	Value* binop40_var = BinaryOperator::Create(Instruction::Add, call39_var, phi35_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi41_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep42_array { cmp6_val6_int, gep8_val8_int, cmp6_val6_int, switch12_val12_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(arg2, gep42_array);
	llvm::LoadInst* load43_var = builder.CreateLoad(gep42_var, false);
	load43_var->setAlignment(1);
	Value* cast44_var = builder.CreateCast(Instruction::ZExt, load43_var, types[7]);
	CallInst* call45_var = builder.CreateCall2(globals[2], phi41_var, cast44_var);
	call45_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep48_array { cmp6_val6_int, cmp6_val6_int, };
	Value* gep48_var = builder.CreateInBoundsGEP(globals[5], gep48_array);
	CallInst* call47_var = builder.CreateCall(globals[3], gep48_var);
	call47_var->setTailCall();
	call47_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi51_var = builder.CreatePHI(types[7], 3);
	CallInst* call52_var = builder.CreateCall3(globals[13], arg1, arg0, phi51_var);
	call52_var->setTailCall();
	call52_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi25_var->addIncoming(call24_var, block5);
	phi25_var->addIncoming(cmp6_val6_int, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi25_var, block6);
	
	phi41_var->addIncoming(binop40_var, block9);
	phi41_var->addIncoming(phi35_var, block8);
	
	phi51_var->addIncoming(call45_var, block10);
	phi51_var->addIncoming(call20_var, block3);
	phi51_var->addIncoming(load17_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_js(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 24u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg0, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(1);
	Constant* cmp8_val8_int = ConstantInt::get(types[1], 0u);
	Value* cmp8_var = builder.CreateICmp(CmpInst::ICMP_EQ, load7_var, cmp8_val8_int);
	builder.CreateCondBr(cmp8_var, block13, block1);
	
	builder.SetInsertPoint(block1);
	Constant* gep10_val10_int = ConstantInt::get(types[3], 15u);
	Constant* gep10_val11_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, gep10_val11_int, };
	Value* gep10_var = builder.CreateInBoundsGEP(arg2, gep10_array);
	llvm::LoadInst* load13_var = builder.CreateLoad(gep10_var, false);
	load13_var->setAlignment(4);
	SwitchInst* switch14_var = builder.CreateSwitch(load13_var, block11, 3);
	Constant* switch14_val14_int = ConstantInt::get(types[3], 2u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val14_int), block2);
	Constant* switch14_val15_int = ConstantInt::get(types[3], 1u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val15_int), block3);
	Constant* switch14_val16_int = ConstantInt::get(types[3], 3u);
	switch14_var->addCase(cast<ConstantInt>(switch14_val16_int), block4);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep17_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, };
	Value* gep17_var = builder.CreateInBoundsGEP(arg2, gep17_array);
	Value* cast18_var = builder.CreateCast(Instruction::BitCast, gep17_var, types[24]);
	llvm::LoadInst* load19_var = builder.CreateLoad(cast18_var, false);
	load19_var->setAlignment(8);
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep20_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep20_var = builder.CreateGEP(arg2, gep20_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep20_var, false);
	load21_var->setAlignment(4);
	CallInst* call22_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call22_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block4);
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, gep10_val11_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cmp26_var = builder.CreateICmp(CmpInst::ICMP_EQ, load25_var, gep10_val11_int);
	builder.CreateCondBr(cmp26_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call27_var = builder.CreateCall2(globals[1], arg0, load25_var);
	call27_var->setTailCall();
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi28_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep29_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val14_int, };
	Value* gep29_var = builder.CreateInBoundsGEP(arg2, gep29_array);
	llvm::LoadInst* load30_var = builder.CreateLoad(gep29_var, false);
	load30_var->setAlignment(4);
	Value* cmp31_var = builder.CreateICmp(CmpInst::ICMP_EQ, load30_var, gep10_val11_int);
	builder.CreateCondBr(cmp31_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call32_var = builder.CreateCall2(globals[1], arg0, load30_var);
	call32_var->setTailCall();
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val16_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cast35_var = builder.CreateCast(Instruction::SExt, load34_var, types[7]);
	Value* binop36_var = BinaryOperator::Create(Instruction::Mul, cast35_var, call32_var, "", builder.GetInsertBlock());
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, binop36_var, phi28_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val15_int, gep10_val11_int, switch14_val15_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(4);
	Value* cmp41_var = builder.CreateICmp(CmpInst::ICMP_EQ, load40_var, gep10_val11_int);
	builder.CreateCondBr(cmp41_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call42_var = builder.CreateCall2(globals[1], arg0, load40_var);
	call42_var->setTailCall();
	Value* binop43_var = BinaryOperator::Create(Instruction::Add, call42_var, phi38_var, "", builder.GetInsertBlock());
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi44_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep10_val10_int, gep3_val3_int, switch14_val14_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(arg2, gep45_array);
	llvm::LoadInst* load46_var = builder.CreateLoad(gep45_var, false);
	load46_var->setAlignment(1);
	Value* cast47_var = builder.CreateCast(Instruction::ZExt, load46_var, types[7]);
	CallInst* call48_var = builder.CreateCall2(globals[2], phi44_var, cast47_var);
	call48_var->setTailCall();
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep51_array { gep3_val3_int, gep3_val3_int, };
	Value* gep51_var = builder.CreateInBoundsGEP(globals[5], gep51_array);
	CallInst* call50_var = builder.CreateCall(globals[3], gep51_var);
	call50_var->setTailCall();
	call50_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block12);
	PHINode* phi54_var = builder.CreatePHI(types[7], 3);
	CallInst* call55_var = builder.CreateCall3(globals[13], arg1, arg0, phi54_var);
	call55_var->setTailCall();
	call55_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block13);
	phi28_var->addIncoming(call27_var, block5);
	phi28_var->addIncoming(gep3_val3_int, block4);
	
	phi38_var->addIncoming(binop37_var, block7);
	phi38_var->addIncoming(phi28_var, block6);
	
	phi44_var->addIncoming(binop43_var, block9);
	phi44_var->addIncoming(phi38_var, block8);
	
	phi54_var->addIncoming(call48_var, block10);
	phi54_var->addIncoming(call22_var, block3);
	phi54_var->addIncoming(load19_var, block2);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandnb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandnd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandnq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandnw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kandw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kmovb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kmovd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kmovq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kmovw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_knotb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_knotd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_knotq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_knotw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_korb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kord(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_korq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kortestw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_korw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kshiftlw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kshiftrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kunpckbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxnorb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxnord(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxnorq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxnorw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxorb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxord(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxorq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_kxorw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lahf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lar(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lcall(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lddqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ldmxcsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lds(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lea(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[7], 1u);
	Constant* gep3_val6_int = ConstantInt::get(types[3], 1u);
	Constant* gep3_val7_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, gep3_val6_int, gep3_val7_int, gep3_val7_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load9_var = builder.CreateLoad(gep3_var, false);
	load9_var->setAlignment(4);
	Value* cmp10_var = builder.CreateICmp(CmpInst::ICMP_EQ, load9_var, gep3_val7_int);
	builder.CreateCondBr(cmp10_var, block2, block1);
	
	builder.SetInsertPoint(block1);
	CallInst* call11_var = builder.CreateCall2(globals[1], arg0, load9_var);
	call11_var->setTailCall();
	builder.CreateBr(block2);
	
	builder.SetInsertPoint(block2);
	PHINode* phi13_var = builder.CreatePHI(types[7], 2);
	Constant* gep14_val14_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, gep3_val6_int, gep3_val7_int, gep14_val14_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load16_var = builder.CreateLoad(gep14_var, false);
	load16_var->setAlignment(4);
	Value* cmp17_var = builder.CreateICmp(CmpInst::ICMP_EQ, load16_var, gep3_val7_int);
	builder.CreateCondBr(cmp17_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call18_var = builder.CreateCall2(globals[1], arg0, load16_var);
	call18_var->setTailCall();
	Constant* gep19_val19_int = ConstantInt::get(types[3], 3u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, gep3_val6_int, gep3_val7_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cast22_var = builder.CreateCast(Instruction::SExt, load21_var, types[7]);
	Value* binop23_var = BinaryOperator::Create(Instruction::Mul, cast22_var, call18_var, "", builder.GetInsertBlock());
	Value* binop24_var = BinaryOperator::Create(Instruction::Add, binop23_var, phi13_var, "", builder.GetInsertBlock());
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi25_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, gep3_val6_int, gep3_val7_int, gep3_val6_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep3_val7_int);
	builder.CreateCondBr(cmp28_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	Value* binop30_var = BinaryOperator::Create(Instruction::Add, call29_var, phi25_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi31_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep32_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val7_int, };
	Value* gep32_var = builder.CreateInBoundsGEP(arg2, gep32_array);
	llvm::LoadInst* load33_var = builder.CreateLoad(gep32_var, false);
	load33_var->setAlignment(4);
	SwitchInst* switch34_var = builder.CreateSwitch(load33_var, block15, 2);
	switch34_var->addCase(cast<ConstantInt>(gep3_val6_int), block7);
	switch34_var->addCase(cast<ConstantInt>(gep19_val19_int), block8);
	
	builder.SetInsertPoint(block7);
	ArrayRef<Value*> gep34_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, gep3_val7_int, gep3_val7_int, };
	Value* gep34_var = builder.CreateGEP(arg2, gep34_array);
	llvm::LoadInst* load35_var = builder.CreateLoad(gep34_var, false);
	load35_var->setAlignment(4);
	CallInst* call36_var = builder.CreateCall3(globals[9], arg0, load35_var, phi31_var);
	call36_var->setTailCall();
	builder.CreateBr(block16);
	
	builder.SetInsertPoint(block8);
	ArrayRef<Value*> gep38_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, gep3_val7_int, gep3_val7_int, };
	Value* gep38_var = builder.CreateInBoundsGEP(arg2, gep38_array);
	llvm::LoadInst* load39_var = builder.CreateLoad(gep38_var, false);
	load39_var->setAlignment(4);
	Value* cmp40_var = builder.CreateICmp(CmpInst::ICMP_EQ, load39_var, gep3_val7_int);
	builder.CreateCondBr(cmp40_var, block10, block9);
	
	builder.SetInsertPoint(block9);
	CallInst* call41_var = builder.CreateCall2(globals[1], arg0, load39_var);
	call41_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block10);
	PHINode* phi42_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep43_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, gep3_val7_int, gep14_val14_int, };
	Value* gep43_var = builder.CreateInBoundsGEP(arg2, gep43_array);
	llvm::LoadInst* load44_var = builder.CreateLoad(gep43_var, false);
	load44_var->setAlignment(4);
	Value* cmp45_var = builder.CreateICmp(CmpInst::ICMP_EQ, load44_var, gep3_val7_int);
	builder.CreateCondBr(cmp45_var, block12, block11);
	
	builder.SetInsertPoint(block11);
	CallInst* call46_var = builder.CreateCall2(globals[1], arg0, load44_var);
	call46_var->setTailCall();
	ArrayRef<Value*> gep47_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, gep3_val7_int, gep19_val19_int, };
	Value* gep47_var = builder.CreateInBoundsGEP(arg2, gep47_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep47_var, false);
	load48_var->setAlignment(4);
	Value* cast49_var = builder.CreateCast(Instruction::SExt, load48_var, types[7]);
	Value* binop50_var = BinaryOperator::Create(Instruction::Mul, cast49_var, call46_var, "", builder.GetInsertBlock());
	Value* binop51_var = BinaryOperator::Create(Instruction::Add, binop50_var, phi42_var, "", builder.GetInsertBlock());
	builder.CreateBr(block12);
	
	builder.SetInsertPoint(block12);
	PHINode* phi52_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep53_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, gep3_val7_int, gep3_val6_int, };
	Value* gep53_var = builder.CreateInBoundsGEP(arg2, gep53_array);
	llvm::LoadInst* load54_var = builder.CreateLoad(gep53_var, false);
	load54_var->setAlignment(4);
	Value* cmp55_var = builder.CreateICmp(CmpInst::ICMP_EQ, load54_var, gep3_val7_int);
	builder.CreateCondBr(cmp55_var, block14, block13);
	
	builder.SetInsertPoint(block13);
	CallInst* call56_var = builder.CreateCall2(globals[1], arg0, load54_var);
	call56_var->setTailCall();
	Value* binop57_var = BinaryOperator::Create(Instruction::Add, call56_var, phi52_var, "", builder.GetInsertBlock());
	builder.CreateBr(block14);
	
	builder.SetInsertPoint(block14);
	PHINode* phi58_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep59_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep14_val14_int, };
	Value* gep59_var = builder.CreateInBoundsGEP(arg2, gep59_array);
	llvm::LoadInst* load60_var = builder.CreateLoad(gep59_var, false);
	load60_var->setAlignment(1);
	Value* cast61_var = builder.CreateCast(Instruction::ZExt, load60_var, types[7]);
	CallInst* call62_var = builder.CreateCall3(globals[10], phi58_var, cast61_var, phi31_var);
	call62_var->setTailCall();
	builder.CreateBr(block16);
	
	builder.SetInsertPoint(block15);
	ArrayRef<Value*> gep65_array { gep3_val3_int, gep3_val3_int, };
	Value* gep65_var = builder.CreateInBoundsGEP(globals[11], gep65_array);
	CallInst* call64_var = builder.CreateCall(globals[3], gep65_var);
	call64_var->setTailCall();
	call64_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block16);
	phi13_var->addIncoming(call11_var, block1);
	phi13_var->addIncoming(gep3_val3_int, block0);
	
	phi25_var->addIncoming(binop24_var, block3);
	phi25_var->addIncoming(phi13_var, block2);
	
	phi31_var->addIncoming(binop30_var, block5);
	phi31_var->addIncoming(phi25_var, block4);
	
	phi42_var->addIncoming(call41_var, block9);
	phi42_var->addIncoming(gep3_val3_int, block8);
	
	phi52_var->addIncoming(binop51_var, block11);
	phi52_var->addIncoming(phi42_var, block10);
	
	phi58_var->addIncoming(binop57_var, block13);
	phi58_var->addIncoming(phi52_var, block12);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_leave(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_les(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lfence(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lfs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lgdt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lgs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lidt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ljmp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lldt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lmsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lodsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lodsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lodsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lodsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_loop(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_loope(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_loopne(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lsl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ltr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_lzcnt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maskmovdqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maskmovq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maxpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maxps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maxsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_maxss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mfence(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_minpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_minps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_minsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_minss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_monitor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_montmul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mov(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[7], 1u);
	Constant* gep3_val6_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, gep3_val6_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load8_var = builder.CreateLoad(gep3_var, false);
	load8_var->setAlignment(4);
	SwitchInst* switch9_var = builder.CreateSwitch(load8_var, block10, 3);
	Constant* switch9_val9_int = ConstantInt::get(types[3], 2u);
	switch9_var->addCase(cast<ConstantInt>(switch9_val9_int), block1);
	Constant* switch9_val10_int = ConstantInt::get(types[3], 1u);
	switch9_var->addCase(cast<ConstantInt>(switch9_val10_int), block2);
	Constant* switch9_val11_int = ConstantInt::get(types[3], 3u);
	switch9_var->addCase(cast<ConstantInt>(switch9_val11_int), block3);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep12_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, };
	Value* gep12_var = builder.CreateInBoundsGEP(arg2, gep12_array);
	Value* cast13_var = builder.CreateCast(Instruction::BitCast, gep12_var, types[24]);
	llvm::LoadInst* load14_var = builder.CreateLoad(cast13_var, false);
	load14_var->setAlignment(8);
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep15_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, gep3_val6_int, gep3_val6_int, };
	Value* gep15_var = builder.CreateGEP(arg2, gep15_array);
	llvm::LoadInst* load16_var = builder.CreateLoad(gep15_var, false);
	load16_var->setAlignment(4);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load16_var);
	call17_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, gep3_val6_int, gep3_val6_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep19_var, false);
	load20_var->setAlignment(4);
	Value* cmp21_var = builder.CreateICmp(CmpInst::ICMP_EQ, load20_var, gep3_val6_int);
	builder.CreateCondBr(cmp21_var, block5, block4);
	
	builder.SetInsertPoint(block4);
	CallInst* call22_var = builder.CreateCall2(globals[1], arg0, load20_var);
	call22_var->setTailCall();
	builder.CreateBr(block5);
	
	builder.SetInsertPoint(block5);
	PHINode* phi23_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, gep3_val6_int, switch9_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cmp26_var = builder.CreateICmp(CmpInst::ICMP_EQ, load25_var, gep3_val6_int);
	builder.CreateCondBr(cmp26_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call27_var = builder.CreateCall2(globals[1], arg0, load25_var);
	call27_var->setTailCall();
	ArrayRef<Value*> gep28_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, gep3_val6_int, switch9_val11_int, };
	Value* gep28_var = builder.CreateInBoundsGEP(arg2, gep28_array);
	llvm::LoadInst* load29_var = builder.CreateLoad(gep28_var, false);
	load29_var->setAlignment(4);
	Value* cast30_var = builder.CreateCast(Instruction::SExt, load29_var, types[7]);
	Value* binop31_var = BinaryOperator::Create(Instruction::Mul, cast30_var, call27_var, "", builder.GetInsertBlock());
	Value* binop32_var = BinaryOperator::Create(Instruction::Add, binop31_var, phi23_var, "", builder.GetInsertBlock());
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi33_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep34_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val10_int, gep3_val6_int, switch9_val10_int, };
	Value* gep34_var = builder.CreateInBoundsGEP(arg2, gep34_array);
	llvm::LoadInst* load35_var = builder.CreateLoad(gep34_var, false);
	load35_var->setAlignment(4);
	Value* cmp36_var = builder.CreateICmp(CmpInst::ICMP_EQ, load35_var, gep3_val6_int);
	builder.CreateCondBr(cmp36_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call37_var = builder.CreateCall2(globals[1], arg0, load35_var);
	call37_var->setTailCall();
	Value* binop38_var = BinaryOperator::Create(Instruction::Add, call37_var, phi33_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi39_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep40_array { gep3_val3_int, gep3_val4_int, gep3_val5_int, switch9_val9_int, };
	Value* gep40_var = builder.CreateInBoundsGEP(arg2, gep40_array);
	llvm::LoadInst* load41_var = builder.CreateLoad(gep40_var, false);
	load41_var->setAlignment(1);
	Value* cast42_var = builder.CreateCast(Instruction::ZExt, load41_var, types[7]);
	CallInst* call43_var = builder.CreateCall2(globals[2], phi39_var, cast42_var);
	call43_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block10);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val3_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(globals[5], gep46_array);
	CallInst* call45_var = builder.CreateCall(globals[3], gep46_var);
	call45_var->setTailCall();
	call45_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block11);
	PHINode* phi49_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val6_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(arg2, gep50_array);
	llvm::LoadInst* load51_var = builder.CreateLoad(gep50_var, false);
	load51_var->setAlignment(4);
	SwitchInst* switch52_var = builder.CreateSwitch(load51_var, block20, 2);
	switch52_var->addCase(cast<ConstantInt>(switch9_val10_int), block12);
	switch52_var->addCase(cast<ConstantInt>(switch9_val11_int), block13);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val10_int, gep3_val6_int, gep3_val6_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall3(globals[9], arg0, load53_var, phi49_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep56_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val10_int, gep3_val6_int, gep3_val6_int, };
	Value* gep56_var = builder.CreateInBoundsGEP(arg2, gep56_array);
	llvm::LoadInst* load57_var = builder.CreateLoad(gep56_var, false);
	load57_var->setAlignment(4);
	Value* cmp58_var = builder.CreateICmp(CmpInst::ICMP_EQ, load57_var, gep3_val6_int);
	builder.CreateCondBr(cmp58_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call59_var = builder.CreateCall2(globals[1], arg0, load57_var);
	call59_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi60_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep61_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val10_int, gep3_val6_int, switch9_val9_int, };
	Value* gep61_var = builder.CreateInBoundsGEP(arg2, gep61_array);
	llvm::LoadInst* load62_var = builder.CreateLoad(gep61_var, false);
	load62_var->setAlignment(4);
	Value* cmp63_var = builder.CreateICmp(CmpInst::ICMP_EQ, load62_var, gep3_val6_int);
	builder.CreateCondBr(cmp63_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call64_var = builder.CreateCall2(globals[1], arg0, load62_var);
	call64_var->setTailCall();
	ArrayRef<Value*> gep65_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val10_int, gep3_val6_int, switch9_val11_int, };
	Value* gep65_var = builder.CreateInBoundsGEP(arg2, gep65_array);
	llvm::LoadInst* load66_var = builder.CreateLoad(gep65_var, false);
	load66_var->setAlignment(4);
	Value* cast67_var = builder.CreateCast(Instruction::SExt, load66_var, types[7]);
	Value* binop68_var = BinaryOperator::Create(Instruction::Mul, cast67_var, call64_var, "", builder.GetInsertBlock());
	Value* binop69_var = BinaryOperator::Create(Instruction::Add, binop68_var, phi60_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi70_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep71_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val10_int, gep3_val6_int, switch9_val10_int, };
	Value* gep71_var = builder.CreateInBoundsGEP(arg2, gep71_array);
	llvm::LoadInst* load72_var = builder.CreateLoad(gep71_var, false);
	load72_var->setAlignment(4);
	Value* cmp73_var = builder.CreateICmp(CmpInst::ICMP_EQ, load72_var, gep3_val6_int);
	builder.CreateCondBr(cmp73_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call74_var = builder.CreateCall2(globals[1], arg0, load72_var);
	call74_var->setTailCall();
	Value* binop75_var = BinaryOperator::Create(Instruction::Add, call74_var, phi70_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi76_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep77_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch9_val9_int, };
	Value* gep77_var = builder.CreateInBoundsGEP(arg2, gep77_array);
	llvm::LoadInst* load78_var = builder.CreateLoad(gep77_var, false);
	load78_var->setAlignment(1);
	Value* cast79_var = builder.CreateCast(Instruction::ZExt, load78_var, types[7]);
	CallInst* call80_var = builder.CreateCall3(globals[10], phi76_var, cast79_var, phi49_var);
	call80_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep82_array { gep3_val3_int, gep3_val3_int, };
	Value* gep82_var = builder.CreateInBoundsGEP(globals[11], gep82_array);
	CallInst* call82_var = builder.CreateCall(globals[3], gep82_var);
	call82_var->setTailCall();
	call82_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	phi23_var->addIncoming(call22_var, block4);
	phi23_var->addIncoming(gep3_val3_int, block3);
	
	phi33_var->addIncoming(binop32_var, block6);
	phi33_var->addIncoming(phi23_var, block5);
	
	phi39_var->addIncoming(binop38_var, block8);
	phi39_var->addIncoming(phi33_var, block7);
	
	phi49_var->addIncoming(call43_var, block9);
	phi49_var->addIncoming(call17_var, block2);
	phi49_var->addIncoming(load14_var, block1);
	
	phi60_var->addIncoming(call59_var, block14);
	phi60_var->addIncoming(gep3_val3_int, block13);
	
	phi70_var->addIncoming(binop69_var, block16);
	phi70_var->addIncoming(phi60_var, block15);
	
	phi76_var->addIncoming(binop75_var, block18);
	phi76_var->addIncoming(phi70_var, block17);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movabs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movapd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movaps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movddup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movdq2q(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movdqa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movdqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movhlps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movhpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movlhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movlpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movlps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movmskpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movmskps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntdqa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movnti(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movntss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movq2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movshdup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsldup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movsxd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movupd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movups(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_movzx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mpsadbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mulpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mulps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mulsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mulss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mulx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_mwait(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_neg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_nop(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_not(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_or(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	Value* binop84_var = BinaryOperator::Create(Instruction::Or, phi83_var, phi45_var, "", builder.GetInsertBlock());
	Constant* gep85_val85_int = ConstantInt::get(types[3], 24u);
	Constant* gep85_val86_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep85_array { gep3_val3_int, gep85_val85_int, gep85_val86_int, };
	Value* gep85_var = builder.CreateInBoundsGEP(arg0, gep85_array);
	Constant* store88_val88_int = ConstantInt::get(types[1], 0u);
	llvm::StoreInst* store88_var = builder.CreateStore(store88_val88_int, gep85_var, false);
	store88_var->setAlignment(1);
	ArrayRef<Value*> gep90_array { gep3_val3_int, gep85_val85_int, gep3_val5_int, };
	Value* gep90_var = builder.CreateInBoundsGEP(arg0, gep90_array);
	llvm::StoreInst* store91_var = builder.CreateStore(store88_val88_int, gep90_var, false);
	store91_var->setAlignment(1);
	ArrayRef<Value*> gep92_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep92_var = builder.CreateInBoundsGEP(arg2, gep92_array);
	llvm::LoadInst* load93_var = builder.CreateLoad(gep92_var, false);
	load93_var->setAlignment(1);
	Value* cast94_var = builder.CreateCast(Instruction::ZExt, load93_var, types[7]);
	Constant* binop95_val95_int = ConstantInt::get(types[7], 3u);
	Value* binop95_var = BinaryOperator::CreateNSW(Instruction::Shl, cast94_var, binop95_val95_int, "", builder.GetInsertBlock());
	Constant* binop97_val97_int = ConstantInt::get(types[7], 4294967295u);
	Value* binop97_var = BinaryOperator::CreateNSW(Instruction::Add, binop95_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop99_var = BinaryOperator::Create(Instruction::And, binop97_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop100_var = BinaryOperator::Create(Instruction::LShr, binop84_var, binop99_var, "", builder.GetInsertBlock());
	Value* cmp101_var = builder.CreateICmp(CmpInst::ICMP_NE, binop100_var, gep3_val3_int);
	Constant* gep102_val102_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep102_array { gep3_val3_int, gep85_val85_int, gep102_val102_int, };
	Value* gep102_var = builder.CreateInBoundsGEP(arg0, gep102_array);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp101_var, types[1]);
	llvm::StoreInst* store105_var = builder.CreateStore(cast104_var, gep102_var, false);
	store105_var->setAlignment(1);
	CallInst* call106_var = builder.CreateCall(globals[8], binop84_var);
	call106_var->setTailCall();
	call106_var->setDoesNotAccessMemory();
	call106_var->setOnlyReadsMemory();
	call106_var->setDoesNotThrow();
	ArrayRef<Value*> gep108_array { gep3_val3_int, gep85_val85_int, switch8_val8_int, };
	Value* gep108_var = builder.CreateInBoundsGEP(arg0, gep108_array);
	Value* cast109_var = builder.CreateCast(Instruction::Trunc, call106_var, types[1]);
	Constant* binop110_val110_int = ConstantInt::get(types[1], 1u);
	Value* binop110_var = BinaryOperator::Create(Instruction::And, cast109_var, binop110_val110_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store112_var = builder.CreateStore(binop110_var, gep108_var, false);
	store112_var->setAlignment(1);
	Value* cmp113_var = builder.CreateICmp(CmpInst::ICMP_EQ, binop84_var, gep3_val3_int);
	ArrayRef<Value*> gep114_array { gep3_val3_int, gep85_val85_int, switch8_val9_int, };
	Value* gep114_var = builder.CreateInBoundsGEP(arg0, gep114_array);
	Value* cast115_var = builder.CreateCast(Instruction::ZExt, cmp113_var, types[1]);
	llvm::StoreInst* store116_var = builder.CreateStore(cast115_var, gep114_var, false);
	store116_var->setAlignment(1);
	ArrayRef<Value*> gep117_array { gep3_val3_int, gep85_val85_int, gep19_val19_int, };
	Value* gep117_var = builder.CreateInBoundsGEP(arg0, gep117_array);
	llvm::StoreInst* store118_var = builder.CreateStore(store88_val88_int, gep117_var, false);
	store118_var->setAlignment(1);
	llvm::LoadInst* load119_var = builder.CreateLoad(gep3_var, false);
	load119_var->setAlignment(4);
	SwitchInst* switch120_var = builder.CreateSwitch(load119_var, block30, 2);
	switch120_var->addCase(cast<ConstantInt>(switch8_val8_int), block22);
	switch120_var->addCase(cast<ConstantInt>(switch8_val9_int), block23);
	
	builder.SetInsertPoint(block22);
	ArrayRef<Value*> gep120_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep120_var = builder.CreateGEP(arg2, gep120_array);
	llvm::LoadInst* load121_var = builder.CreateLoad(gep120_var, false);
	load121_var->setAlignment(4);
	CallInst* call122_var = builder.CreateCall3(globals[9], arg0, load121_var, binop84_var);
	call122_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block23);
	ArrayRef<Value*> gep124_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep124_var = builder.CreateInBoundsGEP(arg2, gep124_array);
	llvm::LoadInst* load125_var = builder.CreateLoad(gep124_var, false);
	load125_var->setAlignment(4);
	Value* cmp126_var = builder.CreateICmp(CmpInst::ICMP_EQ, load125_var, gep3_val5_int);
	builder.CreateCondBr(cmp126_var, block25, block24);
	
	builder.SetInsertPoint(block24);
	CallInst* call127_var = builder.CreateCall2(globals[1], arg0, load125_var);
	call127_var->setTailCall();
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block25);
	PHINode* phi128_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep129_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep129_var = builder.CreateInBoundsGEP(arg2, gep129_array);
	llvm::LoadInst* load130_var = builder.CreateLoad(gep129_var, false);
	load130_var->setAlignment(4);
	Value* cmp131_var = builder.CreateICmp(CmpInst::ICMP_EQ, load130_var, gep3_val5_int);
	builder.CreateCondBr(cmp131_var, block27, block26);
	
	builder.SetInsertPoint(block26);
	CallInst* call132_var = builder.CreateCall2(globals[1], arg0, load130_var);
	call132_var->setTailCall();
	ArrayRef<Value*> gep133_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep133_var = builder.CreateInBoundsGEP(arg2, gep133_array);
	llvm::LoadInst* load134_var = builder.CreateLoad(gep133_var, false);
	load134_var->setAlignment(4);
	Value* cast135_var = builder.CreateCast(Instruction::SExt, load134_var, types[7]);
	Value* binop136_var = BinaryOperator::Create(Instruction::Mul, cast135_var, call132_var, "", builder.GetInsertBlock());
	Value* binop137_var = BinaryOperator::Create(Instruction::Add, binop136_var, phi128_var, "", builder.GetInsertBlock());
	builder.CreateBr(block27);
	
	builder.SetInsertPoint(block27);
	PHINode* phi138_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep139_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep139_var = builder.CreateInBoundsGEP(arg2, gep139_array);
	llvm::LoadInst* load140_var = builder.CreateLoad(gep139_var, false);
	load140_var->setAlignment(4);
	Value* cmp141_var = builder.CreateICmp(CmpInst::ICMP_EQ, load140_var, gep3_val5_int);
	builder.CreateCondBr(cmp141_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call142_var = builder.CreateCall2(globals[1], arg0, load140_var);
	call142_var->setTailCall();
	Value* binop143_var = BinaryOperator::Create(Instruction::Add, call142_var, phi138_var, "", builder.GetInsertBlock());
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi144_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load145_var = builder.CreateLoad(gep92_var, false);
	load145_var->setAlignment(1);
	Value* cast146_var = builder.CreateCast(Instruction::ZExt, load145_var, types[7]);
	CallInst* call147_var = builder.CreateCall3(globals[10], phi144_var, cast146_var, binop84_var);
	call147_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block30);
	ArrayRef<Value*> gep149_array { gep3_val3_int, gep3_val3_int, };
	Value* gep149_var = builder.CreateInBoundsGEP(globals[11], gep149_array);
	CallInst* call149_var = builder.CreateCall(globals[3], gep149_var);
	call149_var->setTailCall();
	call149_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block31);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi128_var->addIncoming(call127_var, block24);
	phi128_var->addIncoming(gep3_val3_int, block23);
	
	phi138_var->addIncoming(binop137_var, block26);
	phi138_var->addIncoming(phi128_var, block25);
	
	phi144_var->addIncoming(binop143_var, block28);
	phi144_var->addIncoming(phi138_var, block27);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_orpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_orps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_out(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_outsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_outsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_outsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pabsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pabsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pabsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_packssdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_packsswb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_packusdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_packuswb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddusb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddusw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_paddw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_palignr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pand(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pandn(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pause(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pavgb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pavgusb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pavgw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pblendvb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pblendw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pclmulqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpeqb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpeqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpeqq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpeqw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpestri(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpestrm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpgtb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpgtd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpgtq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpgtw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpistri(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pcmpistrm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pdep(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pext(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pextrb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pextrd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pextrq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pextrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pf2id(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pf2iw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfacc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfadd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfcmpeq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfcmpge(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfcmpgt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfmax(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfmin(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfmul(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfnacc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfpnacc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfrcp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfrcpit1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfrcpit2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfrsqit1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfrsqrt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfsub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pfsubr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phaddd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phaddsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phaddw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phminposuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phsubd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phsubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_phsubw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pi2fd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pi2fw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pinsrb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pinsrd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pinsrq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pinsrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaddubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaddwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmaxuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pminuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovmskb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxbd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxbq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovsxwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxbd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxbq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmovzxwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmuldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmulhrsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmulhrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmulhuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmulhw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmulld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmullw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pmuludq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pop(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg1, gep3_array);
	llvm::LoadInst* load6_var = builder.CreateLoad(gep3_var, false);
	load6_var->setAlignment(4);
	CallInst* call7_var = builder.CreateCall2(globals[1], arg0, load6_var);
	call7_var->setTailCall();
	Constant* gep9_val9_int = ConstantInt::get(types[3], 15u);
	ArrayRef<Value*> gep9_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, gep3_val4_int, };
	Value* gep9_var = builder.CreateInBoundsGEP(arg2, gep9_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep9_var, false);
	load11_var->setAlignment(1);
	Value* cast12_var = builder.CreateCast(Instruction::ZExt, load11_var, types[7]);
	CallInst* call13_var = builder.CreateCall2(globals[2], call7_var, cast12_var);
	call13_var->setTailCall();
	Value* binop15_var = BinaryOperator::Create(Instruction::Add, cast12_var, call7_var, "", builder.GetInsertBlock());
	CallInst* call16_var = builder.CreateCall3(globals[9], arg0, load6_var, binop15_var);
	call16_var->setTailCall();
	Constant* gep18_val18_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep18_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, gep18_val18_int, };
	Value* gep18_var = builder.CreateInBoundsGEP(arg2, gep18_array);
	llvm::LoadInst* load20_var = builder.CreateLoad(gep18_var, false);
	load20_var->setAlignment(4);
	SwitchInst* switch21_var = builder.CreateSwitch(load20_var, block9, 2);
	Constant* switch21_val21_int = ConstantInt::get(types[3], 1u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val21_int), block1);
	Constant* switch21_val22_int = ConstantInt::get(types[3], 3u);
	switch21_var->addCase(cast<ConstantInt>(switch21_val22_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, switch21_val21_int, gep18_val18_int, gep18_val18_int, };
	Value* gep23_var = builder.CreateGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	CallInst* call25_var = builder.CreateCall3(globals[9], arg0, load24_var, call13_var);
	call25_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep26_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, switch21_val21_int, gep18_val18_int, gep18_val18_int, };
	Value* gep26_var = builder.CreateInBoundsGEP(arg2, gep26_array);
	llvm::LoadInst* load27_var = builder.CreateLoad(gep26_var, false);
	load27_var->setAlignment(4);
	Value* cmp28_var = builder.CreateICmp(CmpInst::ICMP_EQ, load27_var, gep18_val18_int);
	builder.CreateCondBr(cmp28_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call29_var = builder.CreateCall2(globals[1], arg0, load27_var);
	call29_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi30_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep31_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, switch21_val21_int, gep18_val18_int, gep3_val4_int, };
	Value* gep31_var = builder.CreateInBoundsGEP(arg2, gep31_array);
	llvm::LoadInst* load32_var = builder.CreateLoad(gep31_var, false);
	load32_var->setAlignment(4);
	Value* cmp33_var = builder.CreateICmp(CmpInst::ICMP_EQ, load32_var, gep18_val18_int);
	builder.CreateCondBr(cmp33_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call34_var = builder.CreateCall2(globals[1], arg0, load32_var);
	call34_var->setTailCall();
	ArrayRef<Value*> gep35_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, switch21_val21_int, gep18_val18_int, switch21_val22_int, };
	Value* gep35_var = builder.CreateInBoundsGEP(arg2, gep35_array);
	llvm::LoadInst* load36_var = builder.CreateLoad(gep35_var, false);
	load36_var->setAlignment(4);
	Value* cast37_var = builder.CreateCast(Instruction::SExt, load36_var, types[7]);
	Value* binop38_var = BinaryOperator::Create(Instruction::Mul, cast37_var, call34_var, "", builder.GetInsertBlock());
	Value* binop39_var = BinaryOperator::Create(Instruction::Add, binop38_var, phi30_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi40_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep41_array { gep3_val3_int, gep9_val9_int, gep3_val3_int, switch21_val21_int, gep18_val18_int, switch21_val21_int, };
	Value* gep41_var = builder.CreateInBoundsGEP(arg2, gep41_array);
	llvm::LoadInst* load42_var = builder.CreateLoad(gep41_var, false);
	load42_var->setAlignment(4);
	Value* cmp43_var = builder.CreateICmp(CmpInst::ICMP_EQ, load42_var, gep18_val18_int);
	builder.CreateCondBr(cmp43_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call44_var = builder.CreateCall2(globals[1], arg0, load42_var);
	call44_var->setTailCall();
	Value* binop45_var = BinaryOperator::Create(Instruction::Add, call44_var, phi40_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi46_var = builder.CreatePHI(types[7], 2);
	CallInst* call47_var = builder.CreateCall3(globals[10], phi46_var, cast12_var, call13_var);
	call47_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep50_array { gep3_val3_int, gep3_val3_int, };
	Value* gep50_var = builder.CreateInBoundsGEP(globals[11], gep50_array);
	CallInst* call49_var = builder.CreateCall(globals[3], gep50_var);
	call49_var->setTailCall();
	call49_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	phi30_var->addIncoming(call29_var, block3);
	phi30_var->addIncoming(gep3_val3_int, block2);
	
	phi40_var->addIncoming(binop39_var, block5);
	phi40_var->addIncoming(phi30_var, block4);
	
	phi46_var->addIncoming(binop45_var, block7);
	phi46_var->addIncoming(phi40_var, block6);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popal(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popaw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popcnt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popfd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_popfq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_por(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetch(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetchnta(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetcht0(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetcht1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetcht2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_prefetchw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psadbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pshufb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pshufd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pshufhw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pshuflw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pshufw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psignb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psignd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psignw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pslld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pslldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psllq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psllw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psrad(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psraw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psrld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psrldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psrlq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psrlw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubusb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubusw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_psubw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pswapd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ptest(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpckhbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpckhdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpckhqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpckhwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpcklbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpckldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpcklqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_punpcklwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_push(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block10, 3);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 2u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	Constant* switch8_val10_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val10_int), block3);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep11_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, };
	Value* gep11_var = builder.CreateInBoundsGEP(arg2, gep11_array);
	Value* cast12_var = builder.CreateCast(Instruction::BitCast, gep11_var, types[24]);
	llvm::LoadInst* load13_var = builder.CreateLoad(cast12_var, false);
	load13_var->setAlignment(8);
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	CallInst* call16_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call16_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block3);
	ArrayRef<Value*> gep18_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, gep3_val5_int, };
	Value* gep18_var = builder.CreateInBoundsGEP(arg2, gep18_array);
	llvm::LoadInst* load19_var = builder.CreateLoad(gep18_var, false);
	load19_var->setAlignment(4);
	Value* cmp20_var = builder.CreateICmp(CmpInst::ICMP_EQ, load19_var, gep3_val5_int);
	builder.CreateCondBr(cmp20_var, block5, block4);
	
	builder.SetInsertPoint(block4);
	CallInst* call21_var = builder.CreateCall2(globals[1], arg0, load19_var);
	call21_var->setTailCall();
	builder.CreateBr(block5);
	
	builder.SetInsertPoint(block5);
	PHINode* phi22_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep23_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val8_int, };
	Value* gep23_var = builder.CreateInBoundsGEP(arg2, gep23_array);
	llvm::LoadInst* load24_var = builder.CreateLoad(gep23_var, false);
	load24_var->setAlignment(4);
	Value* cmp25_var = builder.CreateICmp(CmpInst::ICMP_EQ, load24_var, gep3_val5_int);
	builder.CreateCondBr(cmp25_var, block7, block6);
	
	builder.SetInsertPoint(block6);
	CallInst* call26_var = builder.CreateCall2(globals[1], arg0, load24_var);
	call26_var->setTailCall();
	ArrayRef<Value*> gep27_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val10_int, };
	Value* gep27_var = builder.CreateInBoundsGEP(arg2, gep27_array);
	llvm::LoadInst* load28_var = builder.CreateLoad(gep27_var, false);
	load28_var->setAlignment(4);
	Value* cast29_var = builder.CreateCast(Instruction::SExt, load28_var, types[7]);
	Value* binop30_var = BinaryOperator::Create(Instruction::Mul, cast29_var, call26_var, "", builder.GetInsertBlock());
	Value* binop31_var = BinaryOperator::Create(Instruction::Add, binop30_var, phi22_var, "", builder.GetInsertBlock());
	builder.CreateBr(block7);
	
	builder.SetInsertPoint(block7);
	PHINode* phi32_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep33_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val9_int, gep3_val5_int, switch8_val9_int, };
	Value* gep33_var = builder.CreateInBoundsGEP(arg2, gep33_array);
	llvm::LoadInst* load34_var = builder.CreateLoad(gep33_var, false);
	load34_var->setAlignment(4);
	Value* cmp35_var = builder.CreateICmp(CmpInst::ICMP_EQ, load34_var, gep3_val5_int);
	builder.CreateCondBr(cmp35_var, block9, block8);
	
	builder.SetInsertPoint(block8);
	CallInst* call36_var = builder.CreateCall2(globals[1], arg0, load34_var);
	call36_var->setTailCall();
	Value* binop37_var = BinaryOperator::Create(Instruction::Add, call36_var, phi32_var, "", builder.GetInsertBlock());
	builder.CreateBr(block9);
	
	builder.SetInsertPoint(block9);
	PHINode* phi38_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep39_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep39_var = builder.CreateInBoundsGEP(arg2, gep39_array);
	llvm::LoadInst* load40_var = builder.CreateLoad(gep39_var, false);
	load40_var->setAlignment(1);
	Value* cast41_var = builder.CreateCast(Instruction::ZExt, load40_var, types[7]);
	CallInst* call42_var = builder.CreateCall2(globals[2], phi38_var, cast41_var);
	call42_var->setTailCall();
	builder.CreateBr(block11);
	
	builder.SetInsertPoint(block10);
	ArrayRef<Value*> gep45_array { gep3_val3_int, gep3_val3_int, };
	Value* gep45_var = builder.CreateInBoundsGEP(globals[5], gep45_array);
	CallInst* call44_var = builder.CreateCall(globals[3], gep45_var);
	call44_var->setTailCall();
	call44_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block11);
	PHINode* phi48_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep49_array { gep3_val3_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg1, gep49_array);
	llvm::LoadInst* load50_var = builder.CreateLoad(gep49_var, false);
	load50_var->setAlignment(4);
	CallInst* call51_var = builder.CreateCall2(globals[1], arg0, load50_var);
	call51_var->setTailCall();
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, };
	Value* gep52_var = builder.CreateInBoundsGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(1);
	Value* cast54_var = builder.CreateCast(Instruction::ZExt, load53_var, types[7]);
	Value* binop55_var = BinaryOperator::Create(Instruction::Sub, call51_var, cast54_var, "", builder.GetInsertBlock());
	CallInst* call56_var = builder.CreateCall3(globals[10], binop55_var, cast54_var, phi48_var);
	call56_var->setTailCall();
	CallInst* call58_var = builder.CreateCall3(globals[9], arg0, load50_var, binop55_var);
	call58_var->setTailCall();
	phi22_var->addIncoming(call21_var, block4);
	phi22_var->addIncoming(gep3_val3_int, block3);
	
	phi32_var->addIncoming(binop31_var, block6);
	phi32_var->addIncoming(phi22_var, block5);
	
	phi38_var->addIncoming(binop37_var, block8);
	phi38_var->addIncoming(phi32_var, block7);
	
	phi48_var->addIncoming(call42_var, block9);
	phi48_var->addIncoming(call16_var, block2);
	phi48_var->addIncoming(load13_var, block1);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pushal(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pushaw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pushf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pushfd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pushfq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_pxor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rcl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rcpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rcpss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rcr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdfsbase(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdgsbase(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdmsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdpmc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdrand(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdseed(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdtsc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rdtscp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ret(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall(globals[14], arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_retf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_retfq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rol(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ror(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rorx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_roundpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_roundps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_roundsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_roundss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rsm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rsqrtps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_rsqrtss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sahf(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sal(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_salc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sar(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sarx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sbb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_scasb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_scasd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_scasq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_scasw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_seta(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setae(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setbe(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sete(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setge(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setle(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setne(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setno(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setnp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setns(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_seto(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_setp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sets(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sfence(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sgdt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha1msg1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha1msg2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha1nexte(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha1rnds4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha256msg1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha256msg2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sha256rnds2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shl(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shlx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shrd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shrx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shufpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_shufps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sidt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_skinit(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sldt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_smsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sqrtpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sqrtps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sqrtsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sqrtss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stac(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_std(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stgi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sti(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stmxcsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stosb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stosd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stosq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_stosw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_str(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	BasicBlock* block32 = BasicBlock::Create(context, "", function);
	BasicBlock* block33 = BasicBlock::Create(context, "", function);
	BasicBlock* block34 = BasicBlock::Create(context, "", function);
	BasicBlock* block35 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	ArrayRef<Value*> gep84_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep84_var = builder.CreateInBoundsGEP(arg2, gep84_array);
	llvm::LoadInst* load85_var = builder.CreateLoad(gep84_var, false);
	load85_var->setAlignment(1);
	Value* cast86_var = builder.CreateCast(Instruction::ZExt, load85_var, types[7]);
	Value* binop87_var = BinaryOperator::Create(Instruction::Sub, gep3_val3_int, phi83_var, "", builder.GetInsertBlock());
	CallInst* call88_var = builder.CreateCall2(globals[6], phi45_var, binop87_var);
	call88_var->setTailCall();
	call88_var->setDoesNotAccessMemory();
	call88_var->setOnlyReadsMemory();
	call88_var->setDoesNotThrow();
	ArrayRef<unsigned> extr90_array { 0, };
	Value* extr90_var = builder.CreateExtractValue(call88_var, extr90_array);
	SwitchInst* switch91_var = builder.CreateSwitch(cast86_var, block24, 4);
	Constant* switch91_val91_int = ConstantInt::get(types[7], 4u);
	switch91_var->addCase(cast<ConstantInt>(switch91_val91_int), block22);
	Constant* switch91_val92_int = ConstantInt::get(types[7], 2u);
	switch91_var->addCase(cast<ConstantInt>(switch91_val92_int), block22);
	switch91_var->addCase(cast<ConstantInt>(gep46_val46_int), block22);
	Constant* switch91_val93_int = ConstantInt::get(types[7], 8u);
	switch91_var->addCase(cast<ConstantInt>(switch91_val93_int), block23);
	
	builder.SetInsertPoint(block22);
	Constant* binop94_val94_int = ConstantInt::get(types[7], 3u);
	Value* binop94_var = BinaryOperator::CreateNSW(Instruction::Shl, cast86_var, binop94_val94_int, "", builder.GetInsertBlock());
	Value* binop96_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop94_var, "", builder.GetInsertBlock());
	Value* binop97_var = BinaryOperator::Create(Instruction::And, binop96_var, extr90_var, "", builder.GetInsertBlock());
	Value* cmp98_var = builder.CreateICmp(CmpInst::ICMP_NE, binop97_var, gep3_val3_int);
	Value* cast99_var = builder.CreateCast(Instruction::ZExt, cmp98_var, types[1]);
	Constant* binop100_val100_int = ConstantInt::get(types[7], 18446744073709551615u);
	Value* binop100_var = BinaryOperator::CreateNSW(Instruction::Add, binop94_var, binop100_val100_int, "", builder.GetInsertBlock());
	Value* binop102_var = BinaryOperator::Create(Instruction::Shl, gep46_val46_int, binop100_var, "", builder.GetInsertBlock());
	Value* binop103_var = BinaryOperator::Create(Instruction::And, binop102_var, extr90_var, "", builder.GetInsertBlock());
	Value* cmp104_var = builder.CreateICmp(CmpInst::ICMP_NE, binop103_var, gep3_val3_int);
	Value* cast105_var = builder.CreateCast(Instruction::ZExt, cmp104_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block23);
	ArrayRef<unsigned> extr106_array { 1, };
	Value* extr106_var = builder.CreateExtractValue(call88_var, extr106_array);
	Value* cast107_var = builder.CreateCast(Instruction::ZExt, extr106_var, types[1]);
	Constant* binop108_val108_int = ConstantInt::get(types[7], 63u);
	Value* binop108_var = BinaryOperator::Create(Instruction::LShr, extr90_var, binop108_val108_int, "", builder.GetInsertBlock());
	Value* cast110_var = builder.CreateCast(Instruction::Trunc, binop108_var, types[1]);
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block24);
	ArrayRef<Value*> gep111_array { gep3_val3_int, gep3_val3_int, };
	Value* gep111_var = builder.CreateInBoundsGEP(globals[7], gep111_array);
	CallInst* call111_var = builder.CreateCall(globals[3], gep111_var);
	call111_var->setTailCall();
	call111_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block25);
	PHINode* phi114_var = builder.CreatePHI(types[1], 2);
	PHINode* phi115_var = builder.CreatePHI(types[1], 2);
	Constant* gep116_val116_int = ConstantInt::get(types[3], 24u);
	ArrayRef<Value*> gep116_array { gep3_val3_int, gep116_val116_int, gep3_val5_int, };
	Value* gep116_var = builder.CreateInBoundsGEP(arg0, gep116_array);
	Constant* binop118_val118_int = ConstantInt::get(types[1], 1u);
	Value* binop118_var = BinaryOperator::Create(Instruction::And, phi115_var, binop118_val118_int, "", builder.GetInsertBlock());
	Constant* gep120_val120_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep120_array { gep3_val3_int, gep116_val116_int, gep120_val120_int, };
	Value* gep120_var = builder.CreateInBoundsGEP(arg0, gep120_array);
	llvm::StoreInst* store122_var = builder.CreateStore(binop118_var, gep120_var, false);
	store122_var->setAlignment(1);
	CallInst* call123_var = builder.CreateCall(globals[8], extr90_var);
	call123_var->setTailCall();
	call123_var->setDoesNotAccessMemory();
	call123_var->setOnlyReadsMemory();
	call123_var->setDoesNotThrow();
	ArrayRef<Value*> gep125_array { gep3_val3_int, gep116_val116_int, switch8_val8_int, };
	Value* gep125_var = builder.CreateInBoundsGEP(arg0, gep125_array);
	Value* cast126_var = builder.CreateCast(Instruction::Trunc, call123_var, types[1]);
	Value* binop127_var = BinaryOperator::Create(Instruction::And, cast126_var, binop118_val118_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store128_var = builder.CreateStore(binop127_var, gep125_var, false);
	store128_var->setAlignment(1);
	Constant* binop129_val129_int = ConstantInt::get(types[7], 15u);
	Value* binop129_var = BinaryOperator::Create(Instruction::And, phi45_var, binop129_val129_int, "", builder.GetInsertBlock());
	Value* binop131_var = BinaryOperator::Create(Instruction::And, binop87_var, binop129_val129_int, "", builder.GetInsertBlock());
	Value* binop132_var = BinaryOperator::CreateNSW(Instruction::Add, binop131_var, binop129_var, "", builder.GetInsertBlock());
	Constant* cmp133_val133_int = ConstantInt::get(types[7], 16u);
	Value* cmp133_var = builder.CreateICmp(CmpInst::ICMP_ULT, binop132_var, cmp133_val133_int);
	ArrayRef<Value*> gep135_array { gep3_val3_int, gep116_val116_int, gep19_val19_int, };
	Value* gep135_var = builder.CreateInBoundsGEP(arg0, gep135_array);
	Value* cmp136_var = builder.CreateICmp(CmpInst::ICMP_EQ, extr90_var, gep3_val3_int);
	ArrayRef<Value*> gep137_array { gep3_val3_int, gep116_val116_int, switch8_val9_int, };
	Value* gep137_var = builder.CreateInBoundsGEP(arg0, gep137_array);
	Value* cast138_var = builder.CreateCast(Instruction::ZExt, cmp136_var, types[1]);
	llvm::StoreInst* store139_var = builder.CreateStore(cast138_var, gep137_var, false);
	store139_var->setAlignment(1);
	Constant* gep140_val140_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep140_array { gep3_val3_int, gep116_val116_int, gep140_val140_int, };
	Value* gep140_var = builder.CreateInBoundsGEP(arg0, gep140_array);
	Value* binop142_var = BinaryOperator::Create(Instruction::Xor, binop118_var, phi114_var, "", builder.GetInsertBlock());
	llvm::StoreInst* store143_var = builder.CreateStore(binop142_var, gep140_var, false);
	store143_var->setAlignment(1);
	Value* binop144_var = BinaryOperator::Create(Instruction::Xor, phi114_var, binop118_val118_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store145_var = builder.CreateStore(binop144_var, gep116_var, false);
	store145_var->setAlignment(1);
	Value* cast146_var = builder.CreateCast(Instruction::ZExt, cmp133_var, types[1]);
	llvm::StoreInst* store147_var = builder.CreateStore(cast146_var, gep135_var, false);
	store147_var->setAlignment(1);
	llvm::LoadInst* load148_var = builder.CreateLoad(gep3_var, false);
	load148_var->setAlignment(4);
	SwitchInst* switch149_var = builder.CreateSwitch(load148_var, block34, 2);
	switch149_var->addCase(cast<ConstantInt>(switch8_val8_int), block26);
	switch149_var->addCase(cast<ConstantInt>(switch8_val9_int), block27);
	
	builder.SetInsertPoint(block26);
	ArrayRef<Value*> gep149_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep149_var = builder.CreateGEP(arg2, gep149_array);
	llvm::LoadInst* load150_var = builder.CreateLoad(gep149_var, false);
	load150_var->setAlignment(4);
	CallInst* call151_var = builder.CreateCall3(globals[9], arg0, load150_var, extr90_var);
	call151_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block27);
	ArrayRef<Value*> gep153_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep153_var = builder.CreateInBoundsGEP(arg2, gep153_array);
	llvm::LoadInst* load154_var = builder.CreateLoad(gep153_var, false);
	load154_var->setAlignment(4);
	Value* cmp155_var = builder.CreateICmp(CmpInst::ICMP_EQ, load154_var, gep3_val5_int);
	builder.CreateCondBr(cmp155_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call156_var = builder.CreateCall2(globals[1], arg0, load154_var);
	call156_var->setTailCall();
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi157_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep158_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep158_var = builder.CreateInBoundsGEP(arg2, gep158_array);
	llvm::LoadInst* load159_var = builder.CreateLoad(gep158_var, false);
	load159_var->setAlignment(4);
	Value* cmp160_var = builder.CreateICmp(CmpInst::ICMP_EQ, load159_var, gep3_val5_int);
	builder.CreateCondBr(cmp160_var, block31, block30);
	
	builder.SetInsertPoint(block30);
	CallInst* call161_var = builder.CreateCall2(globals[1], arg0, load159_var);
	call161_var->setTailCall();
	ArrayRef<Value*> gep162_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep162_var = builder.CreateInBoundsGEP(arg2, gep162_array);
	llvm::LoadInst* load163_var = builder.CreateLoad(gep162_var, false);
	load163_var->setAlignment(4);
	Value* cast164_var = builder.CreateCast(Instruction::SExt, load163_var, types[7]);
	Value* binop165_var = BinaryOperator::Create(Instruction::Mul, cast164_var, call161_var, "", builder.GetInsertBlock());
	Value* binop166_var = BinaryOperator::Create(Instruction::Add, binop165_var, phi157_var, "", builder.GetInsertBlock());
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block31);
	PHINode* phi167_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep168_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep168_var = builder.CreateInBoundsGEP(arg2, gep168_array);
	llvm::LoadInst* load169_var = builder.CreateLoad(gep168_var, false);
	load169_var->setAlignment(4);
	Value* cmp170_var = builder.CreateICmp(CmpInst::ICMP_EQ, load169_var, gep3_val5_int);
	builder.CreateCondBr(cmp170_var, block33, block32);
	
	builder.SetInsertPoint(block32);
	CallInst* call171_var = builder.CreateCall2(globals[1], arg0, load169_var);
	call171_var->setTailCall();
	Value* binop172_var = BinaryOperator::Create(Instruction::Add, call171_var, phi167_var, "", builder.GetInsertBlock());
	builder.CreateBr(block33);
	
	builder.SetInsertPoint(block33);
	PHINode* phi173_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load174_var = builder.CreateLoad(gep84_var, false);
	load174_var->setAlignment(1);
	Value* cast175_var = builder.CreateCast(Instruction::ZExt, load174_var, types[7]);
	CallInst* call176_var = builder.CreateCall3(globals[10], phi173_var, cast175_var, extr90_var);
	call176_var->setTailCall();
	builder.CreateBr(block35);
	
	builder.SetInsertPoint(block34);
	ArrayRef<Value*> gep178_array { gep3_val3_int, gep3_val3_int, };
	Value* gep178_var = builder.CreateInBoundsGEP(globals[11], gep178_array);
	CallInst* call178_var = builder.CreateCall(globals[3], gep178_var);
	call178_var->setTailCall();
	call178_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block35);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi114_var->addIncoming(cast99_var, block22);
	phi114_var->addIncoming(cast107_var, block23);
	
	phi115_var->addIncoming(cast105_var, block22);
	phi115_var->addIncoming(cast110_var, block23);
	
	phi157_var->addIncoming(call156_var, block28);
	phi157_var->addIncoming(gep3_val3_int, block27);
	
	phi167_var->addIncoming(binop166_var, block30);
	phi167_var->addIncoming(phi157_var, block29);
	
	phi173_var->addIncoming(binop172_var, block32);
	phi173_var->addIncoming(phi167_var, block31);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_subpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_subps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_subsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_subss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_swapgs(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_syscall(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sysenter(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sysexit(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_sysret(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_t1mskc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_test(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	Value* binop84_var = BinaryOperator::Create(Instruction::And, phi83_var, phi45_var, "", builder.GetInsertBlock());
	Constant* gep85_val85_int = ConstantInt::get(types[3], 24u);
	Constant* gep85_val86_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep85_array { gep3_val3_int, gep85_val85_int, gep85_val86_int, };
	Value* gep85_var = builder.CreateInBoundsGEP(arg0, gep85_array);
	Constant* store88_val88_int = ConstantInt::get(types[1], 0u);
	llvm::StoreInst* store88_var = builder.CreateStore(store88_val88_int, gep85_var, false);
	store88_var->setAlignment(1);
	ArrayRef<Value*> gep90_array { gep3_val3_int, gep85_val85_int, gep3_val5_int, };
	Value* gep90_var = builder.CreateInBoundsGEP(arg0, gep90_array);
	llvm::StoreInst* store91_var = builder.CreateStore(store88_val88_int, gep90_var, false);
	store91_var->setAlignment(1);
	ArrayRef<Value*> gep92_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep92_var = builder.CreateInBoundsGEP(arg2, gep92_array);
	llvm::LoadInst* load93_var = builder.CreateLoad(gep92_var, false);
	load93_var->setAlignment(1);
	Value* cast94_var = builder.CreateCast(Instruction::ZExt, load93_var, types[7]);
	Constant* binop95_val95_int = ConstantInt::get(types[7], 3u);
	Value* binop95_var = BinaryOperator::CreateNSW(Instruction::Shl, cast94_var, binop95_val95_int, "", builder.GetInsertBlock());
	Constant* binop97_val97_int = ConstantInt::get(types[7], 4294967295u);
	Value* binop97_var = BinaryOperator::CreateNSW(Instruction::Add, binop95_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop99_var = BinaryOperator::Create(Instruction::And, binop97_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop100_var = BinaryOperator::Create(Instruction::LShr, binop84_var, binop99_var, "", builder.GetInsertBlock());
	Value* cmp101_var = builder.CreateICmp(CmpInst::ICMP_NE, binop100_var, gep3_val3_int);
	Constant* gep102_val102_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep102_array { gep3_val3_int, gep85_val85_int, gep102_val102_int, };
	Value* gep102_var = builder.CreateInBoundsGEP(arg0, gep102_array);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp101_var, types[1]);
	llvm::StoreInst* store105_var = builder.CreateStore(cast104_var, gep102_var, false);
	store105_var->setAlignment(1);
	CallInst* call106_var = builder.CreateCall(globals[8], binop84_var);
	call106_var->setTailCall();
	call106_var->setDoesNotAccessMemory();
	call106_var->setOnlyReadsMemory();
	call106_var->setDoesNotThrow();
	ArrayRef<Value*> gep108_array { gep3_val3_int, gep85_val85_int, switch8_val8_int, };
	Value* gep108_var = builder.CreateInBoundsGEP(arg0, gep108_array);
	Value* cast109_var = builder.CreateCast(Instruction::Trunc, call106_var, types[1]);
	Constant* binop110_val110_int = ConstantInt::get(types[1], 1u);
	Value* binop110_var = BinaryOperator::Create(Instruction::And, cast109_var, binop110_val110_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store112_var = builder.CreateStore(binop110_var, gep108_var, false);
	store112_var->setAlignment(1);
	Value* cmp113_var = builder.CreateICmp(CmpInst::ICMP_EQ, binop84_var, gep3_val3_int);
	ArrayRef<Value*> gep114_array { gep3_val3_int, gep85_val85_int, switch8_val9_int, };
	Value* gep114_var = builder.CreateInBoundsGEP(arg0, gep114_array);
	Value* cast115_var = builder.CreateCast(Instruction::ZExt, cmp113_var, types[1]);
	llvm::StoreInst* store116_var = builder.CreateStore(cast115_var, gep114_var, false);
	store116_var->setAlignment(1);
	ArrayRef<Value*> gep117_array { gep3_val3_int, gep85_val85_int, gep19_val19_int, };
	Value* gep117_var = builder.CreateInBoundsGEP(arg0, gep117_array);
	llvm::StoreInst* store118_var = builder.CreateStore(store88_val88_int, gep117_var, false);
	store118_var->setAlignment(1);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_tzcnt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_tzmsk(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ucomisd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ucomiss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ud2(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_ud2b(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_unpckhpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_unpckhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_unpcklpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_unpcklps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaddsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaesdec(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaesdeclast(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaesenc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaesenclast(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaesimc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vaeskeygenassist(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_valignd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_valignq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vandnpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vandnps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vandpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vandps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendmpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendmps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendvpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vblendvps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcastf128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcasti128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcasti32x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcasti64x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcastsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vbroadcastss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcmp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcmppd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcmpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcmpsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcmpss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcomisd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcomiss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtdq2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtdq2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtpd2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtpd2dqx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtpd2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtpd2psx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtpd2udq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtph2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtps2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtps2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtps2ph(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtps2udq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtsd2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtsd2ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtsd2usi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtsi2sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtsi2ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtss2sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtss2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtss2usi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttpd2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttpd2dqx(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttpd2udq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttps2dq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttps2udq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttsd2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttsd2usi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttss2si(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvttss2usi(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtudq2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtudq2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtusi2sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vcvtusi2ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdivpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdivps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdivsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdivss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdppd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vdpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_verr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_verw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextractf128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextractf32x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextractf64x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextracti128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextracti32x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextracti64x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vextractps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd132sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd132ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd213sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd213ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd231sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmadd231ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsub231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmaddsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub132sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub132ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub213sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub213ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub231sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsub231ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubadd231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubaddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubaddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfmsubss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd132sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd132ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd213sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd213ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd231sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmadd231ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmaddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmaddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmaddsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmaddss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub132pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub132ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub132sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub132ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub213pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub213ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub213sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub213ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub231pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub231ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub231sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsub231ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsubsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfnmsubss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfrczpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfrczps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfrczsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vfrczss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherdpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherdps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf0dpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf0dps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf0qpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf0qps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf1dpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf1dps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf1qpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherpf1qps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherqpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vgatherqps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vhaddpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vhaddps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vhsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vhsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinsertf128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinsertf32x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinsertf64x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinserti128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinserti32x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinserti64x4(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vinsertps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vlddqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vldmxcsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaskmovdqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaskmovpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaskmovps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaxpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaxps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaxsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmaxss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmcall(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmclear(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmfunc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vminpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vminps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vminsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vminss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmlaunch(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmload(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmmcall(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovapd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovaps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovddup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqa32(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqa64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqu(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqu16(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqu32(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqu64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovdqu8(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovhlps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovhpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovlhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovlpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovlps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovmskpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovmskps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovntdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovntdqa(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovntpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovntps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovshdup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovsldup(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovupd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmovups(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmpsadbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmptrld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmptrst(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmread(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmresume(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmrun(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmsave(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmulpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmulps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmulsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmulss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmwrite(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmxoff(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vmxon(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vorpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vorps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpabsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpabsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpabsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpabsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpackssdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpacksswb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpackusdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpackuswb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddusb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddusw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpaddw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpalignr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpand(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpandd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpandn(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpandnd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpandnq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpandq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpavgb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpavgw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpblendd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpblendmd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpblendmq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpblendvb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpblendw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastmb2q(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastmw2d(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpbroadcastw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpclmulqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmov(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmp(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpeqb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpeqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpeqq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpeqw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpestri(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpestrm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpgtb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpgtd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpgtq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpgtw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpistri(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpistrm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcmpuq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomuq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpcomw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpconflictd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpconflictq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vperm2f128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vperm2i128(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermi2d(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermi2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermi2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermi2q(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermil2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermil2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermilpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermilps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermt2d(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermt2pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermt2ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpermt2q(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpextrb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpextrd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpextrq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpextrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpgatherdd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpgatherdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpgatherqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpgatherqq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddbd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddbq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphadddq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddubd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddubq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddubw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddudq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphadduwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphadduwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphaddwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphminposuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vphsubwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpinsrb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpinsrd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpinsrq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpinsrw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vplzcntd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vplzcntq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacsdd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacsdqh(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacsdql(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacssdd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacssdqh(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacssdql(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacsswd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacssww(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacswd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmacsww(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmadcsswd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmadcswd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaddubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaddwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaskmovd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaskmovq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxuq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmaxuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminsq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminub(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminud(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminuq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpminuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovdb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovmskb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovqb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovqw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsdb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsqb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsqw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxbd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxbq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovsxwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovusdb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovusdw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovusqb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovusqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovusqw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxbd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxbq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmovzxwq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmuldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmulhrsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmulhuw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmulhw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmulld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmullw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpmuludq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpord(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vporq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpperm(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vprotb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vprotd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vprotq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vprotw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsadbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpscatterdd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpscatterdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpscatterqd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpscatterqq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshab(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshad(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshaq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshaw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshlb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshlq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshlw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshufb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshufd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshufhw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpshuflw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsignb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsignd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsignw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpslld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpslldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsllq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsllvd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsllvq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsllw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrad(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsraq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsravd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsravq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsraw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrld(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrlq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrlvd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrlvq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsrlw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubsb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubsw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubusb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubusw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpsubw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vptest(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vptestmd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vptestmq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vptestnmd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vptestnmq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpckhbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpckhdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpckhqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpckhwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpcklbw(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpckldq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpcklqdq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpunpcklwd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpxor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpxord(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vpxorq(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp14pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp14ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp14sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp14ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp28pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp28ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp28sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcp28ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcpps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrcpss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrndscalepd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrndscaleps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrndscalesd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrndscaless(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vroundpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vroundps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vroundsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vroundss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt14pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt14ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt14sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt14ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt28pd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt28ps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt28sd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrt28ss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrtps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vrsqrtss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterdpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterdps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf0dpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf0dps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf0qpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf0qps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf1dpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf1dps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf1qpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterpf1qps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterqpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vscatterqps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vshufpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vshufps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsqrtpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsqrtps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsqrtsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsqrtss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vstmxcsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsubpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsubps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsubsd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vsubss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vtestpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vtestps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vucomisd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vucomiss(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vunpckhpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vunpckhps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vunpcklpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vunpcklps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vxorpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vxorps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vzeroall(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_vzeroupper(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_wait(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_wbinvd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_wrfsbase(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_wrgsbase(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_wrmsr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xabort(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xacquire(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xadd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xbegin(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xchg(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xcryptcbc(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xcryptcfb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xcryptctr(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xcryptecb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xcryptofb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xend(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xgetbv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xlatb(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	BasicBlock* block1 = BasicBlock::Create(context, "", function);
	BasicBlock* block2 = BasicBlock::Create(context, "", function);
	BasicBlock* block3 = BasicBlock::Create(context, "", function);
	BasicBlock* block4 = BasicBlock::Create(context, "", function);
	BasicBlock* block5 = BasicBlock::Create(context, "", function);
	BasicBlock* block6 = BasicBlock::Create(context, "", function);
	BasicBlock* block7 = BasicBlock::Create(context, "", function);
	BasicBlock* block8 = BasicBlock::Create(context, "", function);
	BasicBlock* block9 = BasicBlock::Create(context, "", function);
	BasicBlock* block10 = BasicBlock::Create(context, "", function);
	BasicBlock* block11 = BasicBlock::Create(context, "", function);
	BasicBlock* block12 = BasicBlock::Create(context, "", function);
	BasicBlock* block13 = BasicBlock::Create(context, "", function);
	BasicBlock* block14 = BasicBlock::Create(context, "", function);
	BasicBlock* block15 = BasicBlock::Create(context, "", function);
	BasicBlock* block16 = BasicBlock::Create(context, "", function);
	BasicBlock* block17 = BasicBlock::Create(context, "", function);
	BasicBlock* block18 = BasicBlock::Create(context, "", function);
	BasicBlock* block19 = BasicBlock::Create(context, "", function);
	BasicBlock* block20 = BasicBlock::Create(context, "", function);
	BasicBlock* block21 = BasicBlock::Create(context, "", function);
	BasicBlock* block22 = BasicBlock::Create(context, "", function);
	BasicBlock* block23 = BasicBlock::Create(context, "", function);
	BasicBlock* block24 = BasicBlock::Create(context, "", function);
	BasicBlock* block25 = BasicBlock::Create(context, "", function);
	BasicBlock* block26 = BasicBlock::Create(context, "", function);
	BasicBlock* block27 = BasicBlock::Create(context, "", function);
	BasicBlock* block28 = BasicBlock::Create(context, "", function);
	BasicBlock* block29 = BasicBlock::Create(context, "", function);
	BasicBlock* block30 = BasicBlock::Create(context, "", function);
	BasicBlock* block31 = BasicBlock::Create(context, "", function);
	Constant* gep3_val3_int = ConstantInt::get(types[7], 0u);
	Constant* gep3_val4_int = ConstantInt::get(types[3], 15u);
	Constant* gep3_val5_int = ConstantInt::get(types[3], 0u);
	ArrayRef<Value*> gep3_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep3_val5_int, };
	Value* gep3_var = builder.CreateInBoundsGEP(arg2, gep3_array);
	llvm::LoadInst* load7_var = builder.CreateLoad(gep3_var, false);
	load7_var->setAlignment(4);
	SwitchInst* switch8_var = builder.CreateSwitch(load7_var, block9, 2);
	Constant* switch8_val8_int = ConstantInt::get(types[3], 1u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val8_int), block1);
	Constant* switch8_val9_int = ConstantInt::get(types[3], 3u);
	switch8_var->addCase(cast<ConstantInt>(switch8_val9_int), block2);
	
	builder.SetInsertPoint(block1);
	ArrayRef<Value*> gep10_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep10_var = builder.CreateGEP(arg2, gep10_array);
	llvm::LoadInst* load11_var = builder.CreateLoad(gep10_var, false);
	load11_var->setAlignment(4);
	CallInst* call12_var = builder.CreateCall2(globals[1], arg0, load11_var);
	call12_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block2);
	ArrayRef<Value*> gep14_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep14_var = builder.CreateInBoundsGEP(arg2, gep14_array);
	llvm::LoadInst* load15_var = builder.CreateLoad(gep14_var, false);
	load15_var->setAlignment(4);
	Value* cmp16_var = builder.CreateICmp(CmpInst::ICMP_EQ, load15_var, gep3_val5_int);
	builder.CreateCondBr(cmp16_var, block4, block3);
	
	builder.SetInsertPoint(block3);
	CallInst* call17_var = builder.CreateCall2(globals[1], arg0, load15_var);
	call17_var->setTailCall();
	builder.CreateBr(block4);
	
	builder.SetInsertPoint(block4);
	PHINode* phi18_var = builder.CreatePHI(types[7], 2);
	Constant* gep19_val19_int = ConstantInt::get(types[3], 2u);
	ArrayRef<Value*> gep19_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep19_var = builder.CreateInBoundsGEP(arg2, gep19_array);
	llvm::LoadInst* load21_var = builder.CreateLoad(gep19_var, false);
	load21_var->setAlignment(4);
	Value* cmp22_var = builder.CreateICmp(CmpInst::ICMP_EQ, load21_var, gep3_val5_int);
	builder.CreateCondBr(cmp22_var, block6, block5);
	
	builder.SetInsertPoint(block5);
	CallInst* call23_var = builder.CreateCall2(globals[1], arg0, load21_var);
	call23_var->setTailCall();
	ArrayRef<Value*> gep24_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep24_var = builder.CreateInBoundsGEP(arg2, gep24_array);
	llvm::LoadInst* load25_var = builder.CreateLoad(gep24_var, false);
	load25_var->setAlignment(4);
	Value* cast26_var = builder.CreateCast(Instruction::SExt, load25_var, types[7]);
	Value* binop27_var = BinaryOperator::Create(Instruction::Mul, cast26_var, call23_var, "", builder.GetInsertBlock());
	Value* binop28_var = BinaryOperator::Create(Instruction::Add, binop27_var, phi18_var, "", builder.GetInsertBlock());
	builder.CreateBr(block6);
	
	builder.SetInsertPoint(block6);
	PHINode* phi29_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep30_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep30_var = builder.CreateInBoundsGEP(arg2, gep30_array);
	llvm::LoadInst* load31_var = builder.CreateLoad(gep30_var, false);
	load31_var->setAlignment(4);
	Value* cmp32_var = builder.CreateICmp(CmpInst::ICMP_EQ, load31_var, gep3_val5_int);
	builder.CreateCondBr(cmp32_var, block8, block7);
	
	builder.SetInsertPoint(block7);
	CallInst* call33_var = builder.CreateCall2(globals[1], arg0, load31_var);
	call33_var->setTailCall();
	Value* binop34_var = BinaryOperator::Create(Instruction::Add, call33_var, phi29_var, "", builder.GetInsertBlock());
	builder.CreateBr(block8);
	
	builder.SetInsertPoint(block8);
	PHINode* phi35_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep36_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep36_var = builder.CreateInBoundsGEP(arg2, gep36_array);
	llvm::LoadInst* load37_var = builder.CreateLoad(gep36_var, false);
	load37_var->setAlignment(1);
	Value* cast38_var = builder.CreateCast(Instruction::ZExt, load37_var, types[7]);
	CallInst* call39_var = builder.CreateCall2(globals[2], phi35_var, cast38_var);
	call39_var->setTailCall();
	builder.CreateBr(block10);
	
	builder.SetInsertPoint(block9);
	ArrayRef<Value*> gep42_array { gep3_val3_int, gep3_val3_int, };
	Value* gep42_var = builder.CreateInBoundsGEP(globals[4], gep42_array);
	CallInst* call41_var = builder.CreateCall(globals[3], gep42_var);
	call41_var->setTailCall();
	call41_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block10);
	PHINode* phi45_var = builder.CreatePHI(types[7], 2);
	Constant* gep46_val46_int = ConstantInt::get(types[7], 1u);
	ArrayRef<Value*> gep46_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep3_val5_int, };
	Value* gep46_var = builder.CreateInBoundsGEP(arg2, gep46_array);
	llvm::LoadInst* load48_var = builder.CreateLoad(gep46_var, false);
	load48_var->setAlignment(4);
	SwitchInst* switch49_var = builder.CreateSwitch(load48_var, block20, 3);
	switch49_var->addCase(cast<ConstantInt>(gep19_val19_int), block11);
	switch49_var->addCase(cast<ConstantInt>(switch8_val8_int), block12);
	switch49_var->addCase(cast<ConstantInt>(switch8_val9_int), block13);
	
	builder.SetInsertPoint(block11);
	ArrayRef<Value*> gep49_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, };
	Value* gep49_var = builder.CreateInBoundsGEP(arg2, gep49_array);
	Value* cast50_var = builder.CreateCast(Instruction::BitCast, gep49_var, types[24]);
	llvm::LoadInst* load51_var = builder.CreateLoad(cast50_var, false);
	load51_var->setAlignment(8);
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block12);
	ArrayRef<Value*> gep52_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep52_var = builder.CreateGEP(arg2, gep52_array);
	llvm::LoadInst* load53_var = builder.CreateLoad(gep52_var, false);
	load53_var->setAlignment(4);
	CallInst* call54_var = builder.CreateCall2(globals[1], arg0, load53_var);
	call54_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block13);
	ArrayRef<Value*> gep55_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep55_var = builder.CreateInBoundsGEP(arg2, gep55_array);
	llvm::LoadInst* load56_var = builder.CreateLoad(gep55_var, false);
	load56_var->setAlignment(4);
	Value* cmp57_var = builder.CreateICmp(CmpInst::ICMP_EQ, load56_var, gep3_val5_int);
	builder.CreateCondBr(cmp57_var, block15, block14);
	
	builder.SetInsertPoint(block14);
	CallInst* call58_var = builder.CreateCall2(globals[1], arg0, load56_var);
	call58_var->setTailCall();
	builder.CreateBr(block15);
	
	builder.SetInsertPoint(block15);
	PHINode* phi59_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep60_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep60_var = builder.CreateInBoundsGEP(arg2, gep60_array);
	llvm::LoadInst* load61_var = builder.CreateLoad(gep60_var, false);
	load61_var->setAlignment(4);
	Value* cmp62_var = builder.CreateICmp(CmpInst::ICMP_EQ, load61_var, gep3_val5_int);
	builder.CreateCondBr(cmp62_var, block17, block16);
	
	builder.SetInsertPoint(block16);
	CallInst* call63_var = builder.CreateCall2(globals[1], arg0, load61_var);
	call63_var->setTailCall();
	ArrayRef<Value*> gep64_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep64_var = builder.CreateInBoundsGEP(arg2, gep64_array);
	llvm::LoadInst* load65_var = builder.CreateLoad(gep64_var, false);
	load65_var->setAlignment(4);
	Value* cast66_var = builder.CreateCast(Instruction::SExt, load65_var, types[7]);
	Value* binop67_var = BinaryOperator::Create(Instruction::Mul, cast66_var, call63_var, "", builder.GetInsertBlock());
	Value* binop68_var = BinaryOperator::Create(Instruction::Add, binop67_var, phi59_var, "", builder.GetInsertBlock());
	builder.CreateBr(block17);
	
	builder.SetInsertPoint(block17);
	PHINode* phi69_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep70_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep70_var = builder.CreateInBoundsGEP(arg2, gep70_array);
	llvm::LoadInst* load71_var = builder.CreateLoad(gep70_var, false);
	load71_var->setAlignment(4);
	Value* cmp72_var = builder.CreateICmp(CmpInst::ICMP_EQ, load71_var, gep3_val5_int);
	builder.CreateCondBr(cmp72_var, block19, block18);
	
	builder.SetInsertPoint(block18);
	CallInst* call73_var = builder.CreateCall2(globals[1], arg0, load71_var);
	call73_var->setTailCall();
	Value* binop74_var = BinaryOperator::Create(Instruction::Add, call73_var, phi69_var, "", builder.GetInsertBlock());
	builder.CreateBr(block19);
	
	builder.SetInsertPoint(block19);
	PHINode* phi75_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep76_array { gep3_val3_int, gep3_val4_int, gep46_val46_int, gep19_val19_int, };
	Value* gep76_var = builder.CreateInBoundsGEP(arg2, gep76_array);
	llvm::LoadInst* load77_var = builder.CreateLoad(gep76_var, false);
	load77_var->setAlignment(1);
	Value* cast78_var = builder.CreateCast(Instruction::ZExt, load77_var, types[7]);
	CallInst* call79_var = builder.CreateCall2(globals[2], phi75_var, cast78_var);
	call79_var->setTailCall();
	builder.CreateBr(block21);
	
	builder.SetInsertPoint(block20);
	ArrayRef<Value*> gep80_array { gep3_val3_int, gep3_val3_int, };
	Value* gep80_var = builder.CreateInBoundsGEP(globals[5], gep80_array);
	CallInst* call80_var = builder.CreateCall(globals[3], gep80_var);
	call80_var->setTailCall();
	call80_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block21);
	PHINode* phi83_var = builder.CreatePHI(types[7], 3);
	Value* binop84_var = BinaryOperator::Create(Instruction::Xor, phi83_var, phi45_var, "", builder.GetInsertBlock());
	Constant* gep85_val85_int = ConstantInt::get(types[3], 24u);
	Constant* gep85_val86_int = ConstantInt::get(types[3], 5u);
	ArrayRef<Value*> gep85_array { gep3_val3_int, gep85_val85_int, gep85_val86_int, };
	Value* gep85_var = builder.CreateInBoundsGEP(arg0, gep85_array);
	Constant* store88_val88_int = ConstantInt::get(types[1], 0u);
	llvm::StoreInst* store88_var = builder.CreateStore(store88_val88_int, gep85_var, false);
	store88_var->setAlignment(1);
	ArrayRef<Value*> gep90_array { gep3_val3_int, gep85_val85_int, gep3_val5_int, };
	Value* gep90_var = builder.CreateInBoundsGEP(arg0, gep90_array);
	llvm::StoreInst* store91_var = builder.CreateStore(store88_val88_int, gep90_var, false);
	store91_var->setAlignment(1);
	ArrayRef<Value*> gep92_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, gep19_val19_int, };
	Value* gep92_var = builder.CreateInBoundsGEP(arg2, gep92_array);
	llvm::LoadInst* load93_var = builder.CreateLoad(gep92_var, false);
	load93_var->setAlignment(1);
	Value* cast94_var = builder.CreateCast(Instruction::ZExt, load93_var, types[7]);
	Constant* binop95_val95_int = ConstantInt::get(types[7], 3u);
	Value* binop95_var = BinaryOperator::CreateNSW(Instruction::Shl, cast94_var, binop95_val95_int, "", builder.GetInsertBlock());
	Constant* binop97_val97_int = ConstantInt::get(types[7], 4294967295u);
	Value* binop97_var = BinaryOperator::CreateNSW(Instruction::Add, binop95_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop99_var = BinaryOperator::Create(Instruction::And, binop97_var, binop97_val97_int, "", builder.GetInsertBlock());
	Value* binop100_var = BinaryOperator::Create(Instruction::LShr, binop84_var, binop99_var, "", builder.GetInsertBlock());
	Value* cmp101_var = builder.CreateICmp(CmpInst::ICMP_NE, binop100_var, gep3_val3_int);
	Constant* gep102_val102_int = ConstantInt::get(types[3], 4u);
	ArrayRef<Value*> gep102_array { gep3_val3_int, gep85_val85_int, gep102_val102_int, };
	Value* gep102_var = builder.CreateInBoundsGEP(arg0, gep102_array);
	Value* cast104_var = builder.CreateCast(Instruction::ZExt, cmp101_var, types[1]);
	llvm::StoreInst* store105_var = builder.CreateStore(cast104_var, gep102_var, false);
	store105_var->setAlignment(1);
	CallInst* call106_var = builder.CreateCall(globals[8], binop84_var);
	call106_var->setTailCall();
	call106_var->setDoesNotAccessMemory();
	call106_var->setOnlyReadsMemory();
	call106_var->setDoesNotThrow();
	ArrayRef<Value*> gep108_array { gep3_val3_int, gep85_val85_int, switch8_val8_int, };
	Value* gep108_var = builder.CreateInBoundsGEP(arg0, gep108_array);
	Value* cast109_var = builder.CreateCast(Instruction::Trunc, call106_var, types[1]);
	Constant* binop110_val110_int = ConstantInt::get(types[1], 1u);
	Value* binop110_var = BinaryOperator::Create(Instruction::And, cast109_var, binop110_val110_int, "", builder.GetInsertBlock());
	llvm::StoreInst* store112_var = builder.CreateStore(binop110_var, gep108_var, false);
	store112_var->setAlignment(1);
	Value* cmp113_var = builder.CreateICmp(CmpInst::ICMP_EQ, phi83_var, phi45_var);
	ArrayRef<Value*> gep114_array { gep3_val3_int, gep85_val85_int, switch8_val9_int, };
	Value* gep114_var = builder.CreateInBoundsGEP(arg0, gep114_array);
	Value* cast115_var = builder.CreateCast(Instruction::ZExt, cmp113_var, types[1]);
	llvm::StoreInst* store116_var = builder.CreateStore(cast115_var, gep114_var, false);
	store116_var->setAlignment(1);
	ArrayRef<Value*> gep117_array { gep3_val3_int, gep85_val85_int, gep19_val19_int, };
	Value* gep117_var = builder.CreateInBoundsGEP(arg0, gep117_array);
	llvm::StoreInst* store118_var = builder.CreateStore(store88_val88_int, gep117_var, false);
	store118_var->setAlignment(1);
	llvm::LoadInst* load119_var = builder.CreateLoad(gep3_var, false);
	load119_var->setAlignment(4);
	SwitchInst* switch120_var = builder.CreateSwitch(load119_var, block30, 2);
	switch120_var->addCase(cast<ConstantInt>(switch8_val8_int), block22);
	switch120_var->addCase(cast<ConstantInt>(switch8_val9_int), block23);
	
	builder.SetInsertPoint(block22);
	ArrayRef<Value*> gep120_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep120_var = builder.CreateGEP(arg2, gep120_array);
	llvm::LoadInst* load121_var = builder.CreateLoad(gep120_var, false);
	load121_var->setAlignment(4);
	CallInst* call122_var = builder.CreateCall3(globals[9], arg0, load121_var, binop84_var);
	call122_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block23);
	ArrayRef<Value*> gep124_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep3_val5_int, };
	Value* gep124_var = builder.CreateInBoundsGEP(arg2, gep124_array);
	llvm::LoadInst* load125_var = builder.CreateLoad(gep124_var, false);
	load125_var->setAlignment(4);
	Value* cmp126_var = builder.CreateICmp(CmpInst::ICMP_EQ, load125_var, gep3_val5_int);
	builder.CreateCondBr(cmp126_var, block25, block24);
	
	builder.SetInsertPoint(block24);
	CallInst* call127_var = builder.CreateCall2(globals[1], arg0, load125_var);
	call127_var->setTailCall();
	builder.CreateBr(block25);
	
	builder.SetInsertPoint(block25);
	PHINode* phi128_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep129_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, gep19_val19_int, };
	Value* gep129_var = builder.CreateInBoundsGEP(arg2, gep129_array);
	llvm::LoadInst* load130_var = builder.CreateLoad(gep129_var, false);
	load130_var->setAlignment(4);
	Value* cmp131_var = builder.CreateICmp(CmpInst::ICMP_EQ, load130_var, gep3_val5_int);
	builder.CreateCondBr(cmp131_var, block27, block26);
	
	builder.SetInsertPoint(block26);
	CallInst* call132_var = builder.CreateCall2(globals[1], arg0, load130_var);
	call132_var->setTailCall();
	ArrayRef<Value*> gep133_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val9_int, };
	Value* gep133_var = builder.CreateInBoundsGEP(arg2, gep133_array);
	llvm::LoadInst* load134_var = builder.CreateLoad(gep133_var, false);
	load134_var->setAlignment(4);
	Value* cast135_var = builder.CreateCast(Instruction::SExt, load134_var, types[7]);
	Value* binop136_var = BinaryOperator::Create(Instruction::Mul, cast135_var, call132_var, "", builder.GetInsertBlock());
	Value* binop137_var = BinaryOperator::Create(Instruction::Add, binop136_var, phi128_var, "", builder.GetInsertBlock());
	builder.CreateBr(block27);
	
	builder.SetInsertPoint(block27);
	PHINode* phi138_var = builder.CreatePHI(types[7], 2);
	ArrayRef<Value*> gep139_array { gep3_val3_int, gep3_val4_int, gep3_val3_int, switch8_val8_int, gep3_val5_int, switch8_val8_int, };
	Value* gep139_var = builder.CreateInBoundsGEP(arg2, gep139_array);
	llvm::LoadInst* load140_var = builder.CreateLoad(gep139_var, false);
	load140_var->setAlignment(4);
	Value* cmp141_var = builder.CreateICmp(CmpInst::ICMP_EQ, load140_var, gep3_val5_int);
	builder.CreateCondBr(cmp141_var, block29, block28);
	
	builder.SetInsertPoint(block28);
	CallInst* call142_var = builder.CreateCall2(globals[1], arg0, load140_var);
	call142_var->setTailCall();
	Value* binop143_var = BinaryOperator::Create(Instruction::Add, call142_var, phi138_var, "", builder.GetInsertBlock());
	builder.CreateBr(block29);
	
	builder.SetInsertPoint(block29);
	PHINode* phi144_var = builder.CreatePHI(types[7], 2);
	llvm::LoadInst* load145_var = builder.CreateLoad(gep92_var, false);
	load145_var->setAlignment(1);
	Value* cast146_var = builder.CreateCast(Instruction::ZExt, load145_var, types[7]);
	CallInst* call147_var = builder.CreateCall3(globals[10], phi144_var, cast146_var, binop84_var);
	call147_var->setTailCall();
	builder.CreateBr(block31);
	
	builder.SetInsertPoint(block30);
	ArrayRef<Value*> gep149_array { gep3_val3_int, gep3_val3_int, };
	Value* gep149_var = builder.CreateInBoundsGEP(globals[11], gep149_array);
	CallInst* call149_var = builder.CreateCall(globals[3], gep149_var);
	call149_var->setTailCall();
	call149_var->setDoesNotReturn();
	builder.CreateUnreachable();
	
	builder.SetInsertPoint(block31);
	phi18_var->addIncoming(call17_var, block3);
	phi18_var->addIncoming(gep3_val3_int, block2);
	
	phi29_var->addIncoming(binop28_var, block5);
	phi29_var->addIncoming(phi18_var, block4);
	
	phi35_var->addIncoming(binop34_var, block7);
	phi35_var->addIncoming(phi29_var, block6);
	
	phi45_var->addIncoming(call39_var, block8);
	phi45_var->addIncoming(call12_var, block1);
	
	phi59_var->addIncoming(call58_var, block14);
	phi59_var->addIncoming(gep3_val3_int, block13);
	
	phi69_var->addIncoming(binop68_var, block16);
	phi69_var->addIncoming(phi59_var, block15);
	
	phi75_var->addIncoming(binop74_var, block18);
	phi75_var->addIncoming(phi69_var, block17);
	
	phi83_var->addIncoming(call79_var, block19);
	phi83_var->addIncoming(call54_var, block12);
	phi83_var->addIncoming(load51_var, block11);
	
	phi128_var->addIncoming(call127_var, block24);
	phi128_var->addIncoming(gep3_val3_int, block23);
	
	phi138_var->addIncoming(binop137_var, block26);
	phi138_var->addIncoming(phi128_var, block25);
	
	phi144_var->addIncoming(binop143_var, block28);
	phi144_var->addIncoming(phi138_var, block27);
	
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xorpd(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xorps(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xrelease(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xrstor(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xrstor64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsave(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsave64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsaveopt(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsaveopt64(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsetbv(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsha1(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xsha256(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xstore(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

void x86::x86_xtest(llvm::Value* arg0, llvm::Value* arg1, llvm::Value* arg2)
{
	using namespace llvm;
	BasicBlock* block0 = builder.GetInsertBlock();
	CallInst* call3_var = builder.CreateCall2(globals[0], arg2, arg0);
	call3_var->setTailCall();
	lastBlock = builder.GetInsertBlock();
	return;
}

#pragma clang diagnostic pop
